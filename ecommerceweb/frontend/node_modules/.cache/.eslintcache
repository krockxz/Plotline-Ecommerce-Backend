[{"D:\\ecommerceweb\\frontend\\src\\index.js":"1","D:\\ecommerceweb\\frontend\\src\\App.js":"2","D:\\ecommerceweb\\frontend\\src\\reportWebVitals.js":"3","D:\\ecommerceweb\\frontend\\src\\app\\store.js":"4","D:\\ecommerceweb\\frontend\\src\\pages\\CartPage.js":"5","D:\\ecommerceweb\\frontend\\src\\pages\\Home.js":"6","D:\\ecommerceweb\\frontend\\src\\pages\\ProductDetailPage.js":"7","D:\\ecommerceweb\\frontend\\src\\pages\\SignupPage.js":"8","D:\\ecommerceweb\\frontend\\src\\pages\\LoginPage.js":"9","D:\\ecommerceweb\\frontend\\src\\pages\\Checkout.js":"10","D:\\ecommerceweb\\frontend\\src\\pages\\404.js":"11","D:\\ecommerceweb\\frontend\\src\\pages\\ForgotPasswordPage.js":"12","D:\\ecommerceweb\\frontend\\src\\pages\\UserProfilePage.js":"13","D:\\ecommerceweb\\frontend\\src\\pages\\AdminHome.js":"14","D:\\ecommerceweb\\frontend\\src\\pages\\OrderSuccessPage.js":"15","D:\\ecommerceweb\\frontend\\src\\pages\\UserOrdersPage.js":"16","D:\\ecommerceweb\\frontend\\src\\pages\\AdminProductFormPage.js":"17","D:\\ecommerceweb\\frontend\\src\\pages\\AdminProductDetailPage.js":"18","D:\\ecommerceweb\\frontend\\src\\pages\\AdminOrdersPage.js":"19","D:\\ecommerceweb\\frontend\\src\\pages\\StripeCheckout.js":"20","D:\\ecommerceweb\\frontend\\src\\pages\\ResetPasswordPage.js":"21","D:\\ecommerceweb\\frontend\\src\\features\\auth\\authSlice.js":"22","D:\\ecommerceweb\\frontend\\src\\features\\counter\\Counter.js":"23","D:\\ecommerceweb\\frontend\\src\\features\\cart\\cartSlice.js":"24","D:\\ecommerceweb\\frontend\\src\\features\\user\\userSlice.js":"25","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Protected.js":"26","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Logout.js":"27","D:\\ecommerceweb\\frontend\\src\\features\\product\\productSlice.js":"28","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\ProtectedAdmin.js":"29","D:\\ecommerceweb\\frontend\\src\\features\\order\\orderSlice.js":"30","D:\\ecommerceweb\\frontend\\src\\features\\cart\\Cart.js":"31","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Signup.js":"32","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Login.js":"33","D:\\ecommerceweb\\frontend\\src\\pages\\CheckoutForm.js":"34","D:\\ecommerceweb\\frontend\\src\\features\\navbar\\Navbar.js":"35","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\ForgotPassword.js":"36","D:\\ecommerceweb\\frontend\\src\\features\\common\\Footer.js":"37","D:\\ecommerceweb\\frontend\\src\\features\\product\\components\\ProductList.js":"38","D:\\ecommerceweb\\frontend\\src\\features\\product\\components\\ProductDetail.js":"39","D:\\ecommerceweb\\frontend\\src\\features\\user\\userAPI.js":"40","D:\\ecommerceweb\\frontend\\src\\features\\cart\\cartAPI.js":"41","D:\\ecommerceweb\\frontend\\src\\features\\counter\\counterSlice.js":"42","D:\\ecommerceweb\\frontend\\src\\features\\auth\\authAPI.js":"43","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\ResetPassword.js":"44","D:\\ecommerceweb\\frontend\\src\\features\\user\\components\\UserProfile.js":"45","D:\\ecommerceweb\\frontend\\src\\features\\user\\components\\UserOrders.js":"46","D:\\ecommerceweb\\frontend\\src\\features\\product\\productAPI.js":"47","D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\AdminOrders.js":"48","D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\ProductForm.js":"49","D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\AdminProductList.js":"50","D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\AdminProductDetail.js":"51","D:\\ecommerceweb\\frontend\\src\\features\\order\\orderAPI.js":"52","D:\\ecommerceweb\\frontend\\src\\features\\common\\Modal.js":"53","D:\\ecommerceweb\\frontend\\src\\app\\constants.js":"54","D:\\ecommerceweb\\frontend\\src\\features\\common\\Pagination.js":"55","D:\\ecommerceweb\\frontend\\src\\features\\counter\\counterAPI.js":"56"},{"size":709,"mtime":1692737845326,"results":"57","hashOfConfig":"58"},{"size":5053,"mtime":1692737845308,"results":"59","hashOfConfig":"58"},{"size":375,"mtime":1692737845330,"results":"60","hashOfConfig":"58"},{"size":548,"mtime":1692737845310,"results":"61","hashOfConfig":"58"},{"size":151,"mtime":1692737845328,"results":"62","hashOfConfig":"58"},{"size":433,"mtime":1692737845329,"results":"63","hashOfConfig":"58"},{"size":425,"mtime":1692737845329,"results":"64","hashOfConfig":"58"},{"size":202,"mtime":1692737845329,"results":"65","hashOfConfig":"58"},{"size":171,"mtime":1692737845329,"results":"66","hashOfConfig":"58"},{"size":23943,"mtime":1692737845328,"results":"67","hashOfConfig":"58"},{"size":1052,"mtime":1692737845327,"results":"68","hashOfConfig":"58"},{"size":225,"mtime":1692737845328,"results":"69","hashOfConfig":"58"},{"size":354,"mtime":1692737845330,"results":"70","hashOfConfig":"58"},{"size":339,"mtime":1692737845327,"results":"71","hashOfConfig":"58"},{"size":3747,"mtime":1692737845329,"results":"72","hashOfConfig":"58"},{"size":349,"mtime":1692737845330,"results":"73","hashOfConfig":"58"},{"size":339,"mtime":1692737845328,"results":"74","hashOfConfig":"58"},{"size":371,"mtime":1692737845327,"results":"75","hashOfConfig":"58"},{"size":331,"mtime":1692737845327,"results":"76","hashOfConfig":"58"},{"size":1552,"mtime":1692737845330,"results":"77","hashOfConfig":"58"},{"size":221,"mtime":1692737845329,"results":"78","hashOfConfig":"58"},{"size":4694,"mtime":1692737845314,"results":"79","hashOfConfig":"58"},{"size":393,"mtime":1692737845319,"results":"80","hashOfConfig":"58"},{"size":3988,"mtime":1692737845318,"results":"81","hashOfConfig":"58"},{"size":2544,"mtime":1692737845325,"results":"82","hashOfConfig":"58"},{"size":366,"mtime":1692737845315,"results":"83","hashOfConfig":"58"},{"size":553,"mtime":1692737845315,"results":"84","hashOfConfig":"58"},{"size":4421,"mtime":1692737845324,"results":"85","hashOfConfig":"58"},{"size":588,"mtime":1692737845316,"results":"86","hashOfConfig":"58"},{"size":2632,"mtime":1692737845322,"results":"87","hashOfConfig":"58"},{"size":9732,"mtime":1692737845317,"results":"88","hashOfConfig":"58"},{"size":6026,"mtime":1692737845316,"results":"89","hashOfConfig":"58"},{"size":4699,"mtime":1692737845315,"results":"90","hashOfConfig":"58"},{"size":3021,"mtime":1692737845328,"results":"91","hashOfConfig":"58"},{"size":11153,"mtime":1692737845321,"results":"92","hashOfConfig":"58"},{"size":3287,"mtime":1692737845315,"results":"93","hashOfConfig":"58"},{"size":2004,"mtime":1692737845318,"results":"94","hashOfConfig":"58"},{"size":17793,"mtime":1692737845323,"results":"95","hashOfConfig":"58"},{"size":15527,"mtime":1692737845323,"results":"96","hashOfConfig":"58"},{"size":767,"mtime":1692737845325,"results":"97","hashOfConfig":"58"},{"size":1539,"mtime":1692737845317,"results":"98","hashOfConfig":"58"},{"size":1045,"mtime":1692737845320,"results":"99","hashOfConfig":"58"},{"size":2835,"mtime":1692737845314,"results":"100","hashOfConfig":"58"},{"size":5254,"mtime":1692737845316,"results":"101","hashOfConfig":"58"},{"size":24922,"mtime":1692737845325,"results":"102","hashOfConfig":"58"},{"size":5485,"mtime":1692737845325,"results":"103","hashOfConfig":"58"},{"size":2270,"mtime":1692737845324,"results":"104","hashOfConfig":"58"},{"size":12331,"mtime":1692737845311,"results":"105","hashOfConfig":"58"},{"size":25998,"mtime":1692737845313,"results":"106","hashOfConfig":"58"},{"size":22002,"mtime":1692737845312,"results":"107","hashOfConfig":"58"},{"size":15374,"mtime":1692737845312,"results":"108","hashOfConfig":"58"},{"size":1216,"mtime":1692737845322,"results":"109","hashOfConfig":"58"},{"size":4257,"mtime":1692737845318,"results":"110","hashOfConfig":"58"},{"size":35,"mtime":1692737845309,"results":"111","hashOfConfig":"58"},{"size":3895,"mtime":1692737845319,"results":"112","hashOfConfig":"58"},{"size":205,"mtime":1692737845319,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y2434a",{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ecommerceweb\\frontend\\src\\index.js",[],[],"D:\\ecommerceweb\\frontend\\src\\App.js",["304","305"],[],"import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport Home from './pages/Home';\r\nimport LoginPage from './pages/LoginPage';\r\nimport SignupPage from './pages/SignupPage';\r\n\r\nimport { createBrowserRouter, Link, RouterProvider } from 'react-router-dom';\r\nimport CartPage from './pages/CartPage';\r\nimport Checkout from './pages/Checkout';\r\nimport ProductDetailPage from './pages/ProductDetailPage';\r\nimport Protected from './features/auth/components/Protected';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  checkAuthAsync,\r\n  selectLoggedInUser,\r\n  selectUserChecked,\r\n} from './features/auth/authSlice';\r\nimport { fetchItemsByUserIdAsync } from './features/cart/cartSlice';\r\nimport PageNotFound from './pages/404';\r\nimport OrderSuccessPage from './pages/OrderSuccessPage';\r\nimport UserOrdersPage from './pages/UserOrdersPage';\r\nimport UserProfilePage from './pages/UserProfilePage';\r\nimport { fetchLoggedInUserAsync } from './features/user/userSlice';\r\nimport Logout from './features/auth/components/Logout';\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\nimport ProtectedAdmin from './features/auth/components/ProtectedAdmin';\r\nimport AdminHome from './pages/AdminHome';\r\nimport AdminProductDetailPage from './pages/AdminProductDetailPage';\r\nimport AdminProductFormPage from './pages/AdminProductFormPage';\r\nimport AdminOrdersPage from './pages/AdminOrdersPage';\r\nimport { positions, Provider } from 'react-alert';\r\nimport AlertTemplate from 'react-alert-template-basic';\r\nimport StripeCheckout from './pages/StripeCheckout';\r\nimport ResetPasswordPage from './pages/ResetPasswordPage';\r\n\r\nconst options = {\r\n  timeout: 5000,\r\n  position: positions.BOTTOM_LEFT,\r\n};\r\n\r\nconst router = createBrowserRouter([\r\n  {\r\n    path: '/',\r\n    element: (\r\n      <Protected>\r\n        <Home></Home>\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/admin',\r\n    element: (\r\n      <ProtectedAdmin>\r\n        <AdminHome></AdminHome>\r\n      </ProtectedAdmin>\r\n    ),\r\n  },\r\n  {\r\n    path: '/login',\r\n    element: <LoginPage></LoginPage>,\r\n  },\r\n  {\r\n    path: '/signup',\r\n    element: <SignupPage></SignupPage>,\r\n  },\r\n  {\r\n    path: '/cart',\r\n    element: (\r\n      <Protected>\r\n        <CartPage></CartPage>\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/checkout',\r\n    element: (\r\n      <Protected>\r\n        <Checkout></Checkout>\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/product-detail/:id',\r\n    element: (\r\n      <Protected>\r\n        <ProductDetailPage></ProductDetailPage>\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/admin/product-detail/:id',\r\n    element: (\r\n      <ProtectedAdmin>\r\n        <AdminProductDetailPage></AdminProductDetailPage>\r\n      </ProtectedAdmin>\r\n    ),\r\n  },\r\n  {\r\n    path: '/admin/product-form',\r\n    element: (\r\n      <ProtectedAdmin>\r\n        <AdminProductFormPage></AdminProductFormPage>\r\n      </ProtectedAdmin>\r\n    ),\r\n  },\r\n  {\r\n    path: '/admin/orders',\r\n    element: (\r\n      <ProtectedAdmin>\r\n        <AdminOrdersPage></AdminOrdersPage>\r\n      </ProtectedAdmin>\r\n    ),\r\n  },\r\n  {\r\n    path: '/admin/product-form/edit/:id',\r\n    element: (\r\n      <ProtectedAdmin>\r\n        <AdminProductFormPage></AdminProductFormPage>\r\n      </ProtectedAdmin>\r\n    ),\r\n  },\r\n  {\r\n    path: '/order-success/:id',\r\n    element: (\r\n      <Protected>\r\n        <OrderSuccessPage></OrderSuccessPage>{' '}\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/my-orders',\r\n    element: (\r\n      <Protected>\r\n        <UserOrdersPage></UserOrdersPage>{' '}\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/profile',\r\n    element: (\r\n      <Protected>\r\n        <UserProfilePage></UserProfilePage>{' '}\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/stripe-checkout/',\r\n    element: (\r\n      <Protected>\r\n        <StripeCheckout></StripeCheckout>\r\n      </Protected>\r\n    ),\r\n  },\r\n  {\r\n    path: '/logout',\r\n    element: <Logout></Logout>,\r\n  },\r\n  {\r\n    path: '/forgot-password',\r\n    element: <ForgotPasswordPage></ForgotPasswordPage>,\r\n  },\r\n  {\r\n    path: '/reset-password',\r\n    element: <ResetPasswordPage></ResetPasswordPage>,\r\n  },\r\n  {\r\n    path: '*',\r\n    element: <PageNotFound></PageNotFound>,\r\n  },\r\n]);\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectLoggedInUser);\r\n  const userChecked = useSelector(selectUserChecked);\r\n\r\n  useEffect(() => {\r\n    dispatch(checkAuthAsync());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      dispatch(fetchItemsByUserIdAsync());\r\n      // we can get req.user by token on backend so no need to give in front-end\r\n      dispatch(fetchLoggedInUserAsync());\r\n    }\r\n  }, [dispatch, user]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        {userChecked && (\r\n          <Provider template={AlertTemplate} {...options}>\r\n            <RouterProvider router={router} />\r\n          </Provider>\r\n        )}\r\n        {/* Link must be inside the Provider */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\ecommerceweb\\frontend\\src\\reportWebVitals.js",[],[],"D:\\ecommerceweb\\frontend\\src\\app\\store.js",["306"],[],"import { configureStore, createReducer } from '@reduxjs/toolkit';\r\nimport productReducer from '../features/product/productSlice';\r\nimport authReducer from '../features/auth/authSlice';\r\nimport cartReducer from '../features/cart/cartSlice';\r\nimport orderReducer from '../features/order/orderSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    product: productReducer,\r\n    auth: authReducer,\r\n    cart: cartReducer,\r\n    order: orderReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n","D:\\ecommerceweb\\frontend\\src\\pages\\CartPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\Home.js",["307"],[],"import { Link } from \"react-router-dom\";\r\nimport NavBar from \"../features/navbar/Navbar\";\r\nimport ProductList from \"../features/product/components/ProductList\";\r\nimport Footer from \"../features/common/Footer\";\r\n\r\nfunction Home() {\r\n    return ( \r\n        <div>\r\n            <NavBar>\r\n                <ProductList></ProductList>\r\n            </NavBar>\r\n            <Footer></Footer>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Home;","D:\\ecommerceweb\\frontend\\src\\pages\\ProductDetailPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\SignupPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\LoginPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\Checkout.js",["308"],[],"import { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  deleteItemFromCartAsync,\r\n  selectItems,\r\n  updateCartAsync,\r\n} from '../features/cart/cartSlice';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { updateUserAsync } from '../features/user/userSlice';\r\nimport { useState } from 'react';\r\nimport {\r\n  createOrderAsync,\r\n  selectCurrentOrder,\r\n  selectStatus,\r\n} from '../features/order/orderSlice';\r\nimport { selectUserInfo } from '../features/user/userSlice';\r\nimport { Grid } from 'react-loader-spinner';\r\nimport { Toaster, toast } from 'react-hot-toast';\r\n\r\nfunction Checkout() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const user = useSelector(selectUserInfo);\r\n  const items = useSelector(selectItems);\r\n  const status = useSelector(selectStatus);\r\n  const currentOrder = useSelector(selectCurrentOrder);\r\n\r\n//checking tax rate\r\n  const calculateTaxRate = (item) => {\r\n    if (item.product.type === \"product\") {\r\n      if (item.product.price > 1000 && item.product.price <= 5000) {\r\n        return 0.12; // PA\r\n      } else if (item.product.price > 5000) {\r\n        return 0.18; // PB\r\n      }\r\n      else{\r\n        return 0.35;\r\n      }\r\n    } else if (item.product.type === \"service\") {\r\n      if (item.product.price > 1000 && item.product.price <= 8000) {\r\n        return 0.1; // SA\r\n      } else if (item.product.price > 8000) {\r\n        return 0.15; // SB\r\n      }\r\n      else{\r\n        return 0.35;\r\n      }\r\n    }\r\n    return 0; // Default tax rate\r\n  };\r\n\r\n  //calculating total amount after tax\r\n  const totalAmount = items.reduce(\r\n    (amount, item) => {\r\n      const taxRate = calculateTaxRate(item);\r\n      const priceAfterDiscount = Math.round(item.product.price * (1 - item.product.discountPercentage / 100));\r\n      const itemTotal = priceAfterDiscount * item.quantity * (1 + taxRate);\r\n      return (itemTotal + amount);\r\n    },\r\n    0\r\n  );\r\n\r\n  //tax price\r\n  const taxprice = items.reduce(\r\n    (amount, item) => {\r\n      const taxRate = calculateTaxRate(item);\r\n      const priceAfterDiscount = Math.round(item.product.price * (1 - item.product.discountPercentage / 100));\r\n      const itemTotal = priceAfterDiscount * item.quantity * ( taxRate);\r\n      return itemTotal;\r\n    },\r\n    0\r\n  );\r\n\r\n\r\n  const totalItems = items.reduce((total, item) => item.quantity + total, 0);\r\n\r\n  const [selectedAddress, setSelectedAddress] = useState(null);\r\n  const [paymentMethod, setPaymentMethod] = useState(null);\r\n\r\n  const handleQuantity = (e, item) => {\r\n    dispatch(updateCartAsync({ id: item.id, quantity: +e.target.value }));\r\n  };\r\n\r\n  const handleRemove = (e, id) => {\r\n    dispatch(deleteItemFromCartAsync(id));\r\n  };\r\n\r\n  const handleAddress = (e) => {\r\n    console.log(e.target.value);\r\n    setSelectedAddress(user.addresses[e.target.value]);\r\n  };\r\n\r\n  const handlePayment = (e) => {\r\n    console.log(e.target.value);\r\n    if(e.target.value === \"card\"){\r\n      toast.error(\"Card method is currently not available trye again later!\")\r\n    }\r\n    else{\r\n      setPaymentMethod(e.target.value);\r\n\r\n    }\r\n  };\r\n\r\n  const handleOrder = (e) => {\r\n    if (selectedAddress && paymentMethod) {\r\n      const order = {\r\n        items,\r\n        totalAmount,\r\n        totalItems,\r\n        user: user.id,\r\n        paymentMethod,\r\n        selectedAddress,\r\n        status: 'pending', // other status can be delivered, received.\r\n      };\r\n      dispatch(createOrderAsync(order));\r\n      // need to redirect from here to a new page of order success.\r\n    } else {\r\n      \r\n      toast.error('Enter Address and Payment method');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Toaster/>\r\n      {!items.length && <Navigate to=\"/\" replace={true}></Navigate>}\r\n      {currentOrder && currentOrder.paymentMethod === 'cash' && (\r\n        <Navigate\r\n          to={`/order-success/${currentOrder.id}`}\r\n          replace={true}\r\n        ></Navigate>\r\n      )}\r\n      {currentOrder && currentOrder.paymentMethod === 'card' && (\r\n        <Navigate to={`/stripe-checkout/`} replace={true}></Navigate>\r\n      )}\r\n\r\n      {status === 'loading' ? (\r\n        <Grid\r\n          height=\"80\"\r\n          width=\"80\"\r\n          color=\"rgb(79, 70, 229) \"\r\n          ariaLabel=\"grid-loading\"\r\n          radius=\"12.5\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"\"\r\n          visible={true}\r\n        />\r\n      ) : <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-5\">\r\n          <div className=\"lg:col-span-3\">\r\n            {/* This form is for address */}\r\n            <form\r\n              className=\"bg-white px-5 py-12 mt-12\"\r\n              noValidate\r\n              onSubmit={handleSubmit((data) => {\r\n                console.log(data);\r\n                dispatch(\r\n                  updateUserAsync({\r\n                    ...user,\r\n                    addresses: [...user.addresses, data],\r\n                  })\r\n                );\r\n                reset();\r\n              })}\r\n            >\r\n              <div className=\"space-y-12\">\r\n                <div className=\"border-b border-gray-900/10 pb-12\">\r\n                  <h2 className=\"text-2xl font-semibold leading-7 text-gray-900\">\r\n                    Personal Information\r\n                  </h2>\r\n                  <p className=\"mt-1 text-sm leading-6 text-gray-600\">\r\n                    Use a permanent address where you can receive mail.\r\n                  </p>\r\n\r\n                  <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\r\n                    <div className=\"sm:col-span-4\">\r\n                      <label\r\n                        htmlFor=\"name\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        Full name\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          {...register('name', {\r\n                            required: 'name is required',\r\n                          })}\r\n                          id=\"name\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.name && (\r\n                          <p className=\"text-red-500\">{errors.name.message}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"sm:col-span-4\">\r\n                      <label\r\n                        htmlFor=\"email\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        Email address\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          id=\"email\"\r\n                          {...register('email', {\r\n                            required: 'email is required',\r\n                          })}\r\n                          type=\"email\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.email && (\r\n                          <p className=\"text-red-500\">{errors.email.message}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"sm:col-span-3\">\r\n                      <label\r\n                        htmlFor=\"phone\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        Phone\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          id=\"phone\"\r\n                          {...register('phone', {\r\n                            required: 'phone is required',\r\n                          })}\r\n                          type=\"tel\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.phone && (\r\n                          <p className=\"text-red-500\">{errors.phone.message}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-full\">\r\n                      <label\r\n                        htmlFor=\"street-address\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        Street address\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          {...register('street', {\r\n                            required: 'street is required',\r\n                          })}\r\n                          id=\"street\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.street && (\r\n                          <p className=\"text-red-500\">\r\n                            {errors.street.message}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"sm:col-span-2 sm:col-start-1\">\r\n                      <label\r\n                        htmlFor=\"city\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        City\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          {...register('city', {\r\n                            required: 'city is required',\r\n                          })}\r\n                          id=\"city\"\r\n                          autoComplete=\"address-level2\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.city && (\r\n                          <p className=\"text-red-500\">{errors.city.message}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"sm:col-span-2\">\r\n                      <label\r\n                        htmlFor=\"state\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        State / Province\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          {...register('state', {\r\n                            required: 'state is required',\r\n                          })}\r\n                          id=\"state\"\r\n                          autoComplete=\"address-level1\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.state && (\r\n                          <p className=\"text-red-500\">{errors.state.message}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"sm:col-span-2\">\r\n                      <label\r\n                        htmlFor=\"pinCode\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        ZIP / Postal code\r\n                      </label>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          {...register('pinCode', {\r\n                            required: 'pinCode is required',\r\n                          })}\r\n                          id=\"pinCode\"\r\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                        />\r\n                        {errors.pinCode && (\r\n                          <p className=\"text-red-500\">\r\n                            {errors.pinCode.message}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"mt-6 flex items-center justify-end gap-x-6\">\r\n                  <button\r\n                    // onClick={e=>reset()}\r\n                    type=\"button\"\r\n                    className=\"text-sm font-semibold leading-6 text-gray-900\"\r\n                  >\r\n                    Reset\r\n                  </button>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n                  >\r\n                    Add Address\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n            <div className=\"border-b border-gray-900/10 pb-12\">\r\n              <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\r\n                Addresses\r\n              </h2>\r\n              <p className=\"mt-1 text-sm leading-6 text-gray-600\">\r\n                Choose from Existing addresses\r\n              </p>\r\n              <ul>\r\n                {user.addresses.map((address, index) => (\r\n                  <li\r\n                    key={index}\r\n                    className=\"flex justify-between gap-x-6 px-5 py-5 border-solid border-2 border-gray-200\"\r\n                  >\r\n                    <div className=\"flex gap-x-4\">\r\n                      <input\r\n                        onChange={handleAddress}\r\n                        name=\"address\"\r\n                        type=\"radio\"\r\n                        value={index}\r\n                        className=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                      />\r\n                      <div className=\"min-w-0 flex-auto\">\r\n                        <p className=\"text-sm font-semibold leading-6 text-gray-900\">\r\n                          {address.name}\r\n                        </p>\r\n                        <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\r\n                          {address.street}\r\n                        </p>\r\n                        <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\r\n                          {address.pinCode}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"hidden sm:flex sm:flex-col sm:items-end\">\r\n                      <p className=\"text-sm leading-6 text-gray-900\">\r\n                        Phone: {address.phone}\r\n                      </p>\r\n                      <p className=\"text-sm leading-6 text-gray-500\">\r\n                        {address.city}\r\n                      </p>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className=\"mt-10 space-y-10\">\r\n                <fieldset>\r\n                  <legend className=\"text-sm font-semibold leading-6 text-gray-900\">\r\n                    Payment Methods\r\n                  </legend>\r\n                  <p className=\"mt-1 text-sm leading-6 text-gray-600\">\r\n                    Choose One\r\n                  </p>\r\n                  <div className=\"mt-6 space-y-6\">\r\n                    <div className=\"flex items-center gap-x-3\">\r\n                      <input\r\n                        id=\"cash\"\r\n                        name=\"payments\"\r\n                        onChange={handlePayment}\r\n                        value=\"cash\"\r\n                        type=\"radio\"\r\n                        checked={paymentMethod === 'cash'}\r\n                        className=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                      />\r\n                      <label\r\n                        htmlFor=\"cash\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        Cash\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-x-3\">\r\n                      <input\r\n                        id=\"card\"\r\n                        onChange={handlePayment}\r\n                        name=\"payments\"\r\n                        checked={paymentMethod === 'card'}\r\n                        value=\"card\"\r\n                        type=\"radio\"\r\n                        className=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                      />\r\n                      <label\r\n                        htmlFor=\"card\"\r\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                      >\r\n                        Card Payment\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </fieldset>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"lg:col-span-2\">\r\n            <div className=\"mx-auto mt-12 bg-white max-w-7xl px-2 sm:px-2 lg:px-4\">\r\n              <div className=\"border-t border-gray-200 px-0 py-6 sm:px-0\">\r\n                <h1 className=\"text-4xl my-5 font-bold tracking-tight text-gray-900\">\r\n                  Cart\r\n                </h1>\r\n                <div className=\"flow-root\">\r\n                  <ul role=\"list\" className=\"-my-6 divide-y divide-gray-200\">\r\n                    {items.map((item) => (\r\n                      <li key={item.id} className=\"flex py-6\">\r\n                        <div className=\"h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200\">\r\n                          <img\r\n                            src={item.product.thumbnail}\r\n                            alt={item.product.title}\r\n                            className=\"h-full w-full object-cover object-center\"\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"ml-4 flex flex-1 flex-col\">\r\n                          <div>\r\n                            <div className=\"flex justify-between text-base font-medium text-gray-900\">\r\n                              <h3>\r\n                                <a href={item.product.id}>\r\n                                  {item.product.title}\r\n                                </a>\r\n                              </h3>\r\n                              <p className=\"ml-4\">\r\n                                Rs. {Math.round(item.product.price * (1 - item.product.discountPercentage / 100))}\r\n                              </p>\r\n                            </div>\r\n                            <p className=\"mt-1 text-sm text-gray-500\">\r\n                              {item.product.brand}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"flex flex-1 items-end justify-between text-sm\">\r\n                            <div className=\"text-gray-500\">\r\n                              <label\r\n                                htmlFor=\"quantity\"\r\n                                className=\"inline mr-5 text-sm font-medium leading-6 text-gray-900\"\r\n                              >\r\n                                Qty\r\n                              </label>\r\n                              <select\r\n                                onChange={(e) => handleQuantity(e, item)}\r\n                                value={item.quantity}\r\n                              >\r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"flex\">\r\n                              <button\r\n                                onClick={(e) => handleRemove(e, item.id)}\r\n                                type=\"button\"\r\n                                className=\"font-medium text-indigo-600 hover:text-indigo-500\"\r\n                              >\r\n                                Remove\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"border-t border-gray-200 px-2 py-6 sm:px-2\">\r\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n                  <p>Tax</p>\r\n                  <p>Rs. {taxprice}</p>\r\n                </div>\r\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n                  <p>Total Amount</p>\r\n                  <p>Rs. {totalAmount}</p>\r\n                </div>\r\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n                  <p>Total Items in Cart</p>\r\n                  <p>{totalItems} items</p>\r\n                </div>\r\n                <p className=\"mt-0.5 text-sm text-gray-500\">\r\n                  Shipping and taxes calculated at checkout.\r\n                </p>\r\n                <div className=\"mt-6\">\r\n                  <div\r\n                    onClick={handleOrder}\r\n                    className=\"flex cursor-pointer items-center justify-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700\"\r\n                  >\r\n                    Order Now\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-6 flex justify-center text-center text-sm text-gray-500\">\r\n                  <p>\r\n                    or\r\n                    <Link to=\"/\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"font-medium text-indigo-600 hover:text-indigo-500\"\r\n                      >\r\n                        Continue Shopping\r\n                        <span aria-hidden=\"true\"> &rarr;</span>\r\n                      </button>\r\n                    </Link>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Checkout;\r\n","D:\\ecommerceweb\\frontend\\src\\pages\\404.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\ForgotPasswordPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\UserProfilePage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\AdminHome.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\OrderSuccessPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\UserOrdersPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\AdminProductFormPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\AdminProductDetailPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\AdminOrdersPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\pages\\StripeCheckout.js",["309"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport CheckoutForm from \"./CheckoutForm\";\r\nimport \"../Stripe.css\";\r\nimport { selectCurrentOrder } from \"../features/order/orderSlice\";\r\n\r\n// Make sure to call loadStripe outside of a component’s render to avoid\r\n// recreating the Stripe object on every render.\r\n// This is your test publishable API key.\r\nconst stripePromise = loadStripe(\"pk_test_51N5NLVSF2Mo4AGVvYGMMNnTcPA5lHrkUv8zPymsKfL31c8m6et8525Y92zMgA22m1u6ZkkXsBofre0PJL6i3eVsh00sR6M8c00\");\r\n\r\nexport default function StripeCheckout() {\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const currentOrder = useSelector(selectCurrentOrder)\r\n\r\n  useEffect(() => {\r\n    // Create PaymentIntent as soon as the page loads\r\n    fetch(\"/create-payment-intent\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ totalAmount: currentOrder.totalAmount, orderId:currentOrder.id }),\r\n    \r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => setClientSecret(data.clientSecret));\r\n  }, []);\r\n\r\n  const appearance = {\r\n    theme: 'stripe',\r\n  };\r\n  const options = {\r\n    clientSecret,\r\n    appearance,\r\n  };\r\n\r\n  return (\r\n    <div className=\"Stripe\">\r\n      {clientSecret && (\r\n        <Elements options={options} stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      )}\r\n    </div>\r\n  );\r\n}","D:\\ecommerceweb\\frontend\\src\\pages\\ResetPasswordPage.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\auth\\authSlice.js",["310"],[],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  loginUser,\r\n  createUser,\r\n  signOut,\r\n  checkAuth,\r\n  resetPasswordRequest,\r\n  resetPassword,\r\n} from './authAPI';\r\nimport { updateUser } from '../user/userAPI';\r\n\r\nconst initialState = {\r\n  loggedInUserToken: null, // this should only contain user identity => 'id'/'role'\r\n  status: 'idle',\r\n  error: null,\r\n  userChecked: false,\r\n  mailSent: false,\r\n  passwordReset:false\r\n};\r\n\r\nexport const createUserAsync = createAsyncThunk(\r\n  'user/createUser',\r\n  async (userData) => {\r\n    const response = await createUser(userData);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const loginUserAsync = createAsyncThunk(\r\n  'user/loginUser',\r\n  async (loginInfo, { rejectWithValue }) => {\r\n    try {\r\n      const response = await loginUser(loginInfo);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkAuthAsync = createAsyncThunk('user/checkAuth', async () => {\r\n  try {\r\n    const response = await checkAuth();\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n});\r\nexport const resetPasswordRequestAsync = createAsyncThunk(\r\n  'user/resetPasswordRequest',\r\n  async (email,{rejectWithValue}) => {\r\n    try {\r\n      const response = await resetPasswordRequest(email);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return rejectWithValue(error);\r\n\r\n    }\r\n  }\r\n);\r\n\r\nexport const resetPasswordAsync = createAsyncThunk(\r\n  'user/resetPassword',\r\n  async (data,{rejectWithValue}) => {\r\n    try {\r\n      const response = await resetPassword(data);\r\n      console.log(response);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return rejectWithValue(error);\r\n\r\n    }\r\n  }\r\n);\r\n\r\nexport const signOutAsync = createAsyncThunk(\r\n  'user/signOut',\r\n  async () => {\r\n    const response = await signOut();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(createUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUserToken = action.payload;\r\n      })\r\n      .addCase(loginUserAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(loginUserAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUserToken = action.payload;\r\n      })\r\n      .addCase(loginUserAsync.rejected, (state, action) => {\r\n        state.status = 'idle';\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(signOutAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(signOutAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUserToken = null;\r\n      })\r\n      .addCase(checkAuthAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(checkAuthAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.loggedInUserToken = action.payload;\r\n        state.userChecked = true;\r\n      })\r\n      .addCase(checkAuthAsync.rejected, (state, action) => {\r\n        state.status = 'idle';\r\n        state.userChecked = true;\r\n      })\r\n      .addCase(resetPasswordRequestAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(resetPasswordRequestAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.mailSent = true;\r\n      })\r\n      .addCase(resetPasswordAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(resetPasswordAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.passwordReset = true;\r\n      })\r\n      .addCase(resetPasswordAsync.rejected, (state, action) => {\r\n        state.status = 'idle';\r\n        state.error = action.payload\r\n      })\r\n  },\r\n});\r\n\r\nexport const selectLoggedInUser = (state) => state.auth.loggedInUserToken;\r\nexport const selectError = (state) => state.auth.error;\r\nexport const selectUserChecked = (state) => state.auth.userChecked;\r\nexport const selectMailSent = (state) => state.auth.mailSent;\r\nexport const selectPasswordReset = (state) => state.auth.passwordReset;\r\n\r\n// export const { } = authSlice.actions;\r\n\r\nexport default authSlice.reducer;\r\n","D:\\ecommerceweb\\frontend\\src\\features\\counter\\Counter.js",["311","312","313","314","315"],[],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  increment,\r\n  incrementAsync,\r\n  selectCount,\r\n} from './counterSlice';\r\n\r\nexport default function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n      \r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\cart\\cartSlice.js",["316","317"],[],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { addToCart, deleteItemFromCart, fetchItemsByUserId, resetCart, updateCart } from './cartAPI';\r\nimport { Toaster, toast } from 'react-hot-toast';\r\n\r\nconst initialState = {\r\n  status: 'idle',\r\n  items: [],\r\n  cartLoaded: false\r\n};\r\n\r\nexport const addToCartAsync = createAsyncThunk(\r\n  'cart/addToCart',\r\n  async ({item, alert}) => {\r\n    const response = await addToCart(item);\r\n    alert.success('Item Added to Cart');\r\n\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchItemsByUserIdAsync = createAsyncThunk(\r\n  'cart/fetchItemsByUserId',\r\n  async () => {\r\n    const response = await fetchItemsByUserId();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updateCartAsync = createAsyncThunk(\r\n  'cart/updateCart',\r\n  async (update) => {\r\n    const response = await updateCart(update);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const deleteItemFromCartAsync = createAsyncThunk(\r\n  'cart/deleteItemFromCart',\r\n  async (itemId) => {\r\n    const response = await deleteItemFromCart(itemId);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const resetCartAsync = createAsyncThunk(\r\n  'cart/resetCart',\r\n  async () => {\r\n    const response = await resetCart();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(addToCartAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(addToCartAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';    \r\n        state.items.push(action.payload);\r\n      })\r\n      .addCase(fetchItemsByUserIdAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchItemsByUserIdAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.items = action.payload;\r\n        state.cartLoaded = true;\r\n      })\r\n      .addCase(fetchItemsByUserIdAsync.rejected, (state, action) => {\r\n        state.status = 'idle';\r\n        state.cartLoaded = true;\r\n      })\r\n      .addCase(updateCartAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(updateCartAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        const index =  state.items.findIndex(item=>item.id===action.payload.id)\r\n        state.items[index] = action.payload;\r\n      })\r\n      .addCase(deleteItemFromCartAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(deleteItemFromCartAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        const index =  state.items.findIndex(item=>item.id===action.payload.id)\r\n        state.items.splice(index,1);\r\n      })\r\n      .addCase(resetCartAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(resetCartAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.items = [];\r\n      })\r\n  },\r\n});\r\n\r\n//delete all item\r\nexport const deleteAllItemsFromCartAsync = createAsyncThunk( \r\n  'cart/deleteAllItems', \r\n  async (_, { dispatch, getState }) => { \r\n    const itemsToDelete = selectItems(getState()); // Assuming you have a selector \r\n    itemsToDelete.forEach(item => { \r\n      dispatch(deleteItemFromCartAsync(item.id)); \r\n    }); \r\n  } \r\n);\r\n\r\n// export const { increment } = cartSlice.actions;\r\n\r\nexport const selectItems = (state) => state.cart.items;\r\nexport const selectCartStatus = (state) => state.cart.status;\r\nexport const selectCartLoaded = (state) => state.cart.cartLoaded;\r\n\r\nexport default cartSlice.reducer;\r\n","D:\\ecommerceweb\\frontend\\src\\features\\user\\userSlice.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Protected.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Logout.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\product\\productSlice.js",["318"],[],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchAllProducts,\r\n  fetchProductsByFilters,\r\n  fetchBrands,\r\n  fetchCategories,\r\n  fetchProductById,\r\n  createProduct,\r\n  updateProduct,\r\n} from './productAPI';\r\n\r\nconst initialState = {\r\n  products: [],\r\n  brands: [],\r\n  categories: [],\r\n  status: 'idle',\r\n  totalItems: 0,\r\n  selectedProduct: null,\r\n};\r\n\r\n\r\nexport const fetchProductByIdAsync = createAsyncThunk(\r\n  'product/fetchProductById',\r\n  async (id) => {\r\n    const response = await fetchProductById(id);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchProductsByFiltersAsync = createAsyncThunk(\r\n  'product/fetchProductsByFilters',\r\n  async ({ filter, sort, pagination, admin }) => {\r\n    const response = await fetchProductsByFilters(filter, sort, pagination, admin);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchBrandsAsync = createAsyncThunk(\r\n  'product/fetchBrands',\r\n  async () => {\r\n    const response = await fetchBrands();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\nexport const fetchCategoriesAsync = createAsyncThunk(\r\n  'product/fetchCategories',\r\n  async () => {\r\n    const response = await fetchCategories();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const createProductAsync = createAsyncThunk(\r\n  'product/create',\r\n  async (product) => {\r\n    const response = await createProduct(product);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updateProductAsync = createAsyncThunk(\r\n  'product/update',\r\n  async (update) => {\r\n    const response = await updateProduct(update);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const productSlice = createSlice({\r\n  name: 'product',\r\n  initialState,\r\n  reducers: {\r\n    clearSelectedProduct:(state)=>{\r\n      state.selectedProduct = null\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchProductsByFiltersAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchProductsByFiltersAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.products = action.payload.products;\r\n        state.totalItems = action.payload.totalItems;\r\n      })\r\n      .addCase(fetchBrandsAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.brands = action.payload;\r\n      })\r\n      .addCase(fetchCategoriesAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchCategoriesAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.categories = action.payload;\r\n      })\r\n      .addCase(fetchProductByIdAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchProductByIdAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.selectedProduct = action.payload;\r\n      })\r\n      .addCase(createProductAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(createProductAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.products.push(action.payload);\r\n      })\r\n      .addCase(updateProductAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(updateProductAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        const index = state.products.findIndex(\r\n          (product) => product.id === action.payload.id\r\n        );\r\n        state.products[index] = action.payload;\r\n        state.selectedProduct = action.payload;\r\n\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearSelectedProduct } = productSlice.actions;\r\n\r\nexport const selectAllProducts = (state) => state.product.products;\r\nexport const selectBrands = (state) => state.product.brands;\r\nexport const selectCategories = (state) => state.product.categories;\r\nexport const selectProductById = (state) => state.product.selectedProduct;\r\nexport const selectProductListStatus = (state) => state.product.status;\r\n\r\nexport const selectTotalItems = (state) => state.product.totalItems;\r\n\r\nexport default productSlice.reducer;\r\n","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\ProtectedAdmin.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\order\\orderSlice.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\cart\\Cart.js",["319"],[],"import { Fragment, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  deleteItemFromCartAsync,\r\n  selectCartLoaded,\r\n  selectCartStatus,\r\n  selectItems,\r\n  updateCartAsync,\r\n  deleteAllItemsFromCartAsync,\r\n} from './cartSlice';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { Grid } from 'react-loader-spinner';\r\nimport Modal from '../common/Modal';\r\nimport { Toaster, toast } from 'react-hot-toast';\r\n\r\nexport default function Cart() {\r\n  const dispatch = useDispatch();\r\n\r\n  const items = useSelector(selectItems);\r\n  const status = useSelector(selectCartStatus);\r\n  const cartLoaded = useSelector(selectCartLoaded)\r\n  const [openModal, setOpenModal] = useState(null);\r\n\r\n  // const totalAmount = items.reduce(\r\n    \r\n  //   (amount, item) => Math.round(item.product.price*(1-item.product.discountPercentage/100)) * item.quantity + amount,\r\n  //   0\r\n  // );\r\n\r\n  const handleDeleteAllItems = () => { \r\n    dispatch(deleteAllItemsFromCartAsync()); // Dispatch the action to delete all items \r\n  };\r\n\r\n\r\n  //checking tax\r\n  const calculateTaxRate = (item) => {\r\n    if (item.product.type === \"product\") {\r\n      if (item.product.price > 1000 && item.product.price <= 5000) {\r\n        return 0.12; // PA\r\n      } else if (item.product.price > 5000) {\r\n        return 0.18; // PB\r\n      }\r\n      else{\r\n        return 0.35;\r\n      }\r\n    } else if (item.product.type === \"service\") {\r\n      if (item.product.price > 1000 && item.product.price <= 8000) {\r\n        return 0.1; // SA\r\n      } else if (item.product.price > 8000) {\r\n        return 0.15; // SB\r\n      }\r\n      else{\r\n        return 0.35;\r\n      }\r\n    }\r\n    return 0; // Default tax rate\r\n  };\r\n\r\n  const totalAmountbeforetax = items.reduce(\r\n    (amount, item) => \r\n      item.product ? \r\n      Math.round(item.product.price * (1 - item.product.discountPercentage / 100)) * item.quantity + amount : \r\n      amount,\r\n    0\r\n  );\r\n  \r\n    //calculating total amount after tax\r\n  const totalAmount = items.reduce(\r\n    (amount, item) => {\r\n      const taxRate = calculateTaxRate(item);\r\n      const priceAfterDiscount = Math.round(item.product.price * (1 - item.product.discountPercentage / 100));\r\n      const itemTotal = priceAfterDiscount * item.quantity * (1 + taxRate);\r\n      return (itemTotal + amount);\r\n    },\r\n    0\r\n  );\r\n  \r\n  //tax price\r\n  const taxprice = items.reduce(\r\n    (amount, item) => {\r\n      const taxRate = calculateTaxRate(item);\r\n      const priceAfterDiscount = Math.round(item.product.price * (1 - item.product.discountPercentage / 100));\r\n      const itemTotal = priceAfterDiscount * item.quantity * ( taxRate);\r\n      return itemTotal ;\r\n    },\r\n    0\r\n  );\r\n\r\n  \r\n  const totalItems = items.reduce((total, item) => item.quantity + total, 0);\r\n\r\n  const handleQuantity = (e, item) => {\r\n    dispatch(updateCartAsync({id:item.id, quantity: +e.target.value }));\r\n  };\r\n\r\n  const handleRemove = (e, id) => {\r\n    dispatch(deleteItemFromCartAsync(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Toaster/>\r\n      {!items.length && cartLoaded && <Navigate to=\"/\" replace={true}></Navigate>}\r\n\r\n      <div>\r\n        <div className=\"mx-auto mt-12 bg-white max-w-7xl px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\r\n            <h1 className=\"text-4xl my-5 font-bold tracking-tight text-gray-900\">\r\n              Cart\r\n            </h1>\r\n            <div className=\"flow-root\">\r\n              {status === 'loading' ? (\r\n                <Grid\r\n                  height=\"80\"\r\n                  width=\"80\"\r\n                  color=\"rgb(79, 70, 229) \"\r\n                  ariaLabel=\"grid-loading\"\r\n                  radius=\"12.5\"\r\n                  wrapperStyle={{}}\r\n                  wrapperClass=\"\"\r\n                  visible={true}\r\n                />\r\n              ) : null}\r\n              <ul className=\"-my-6 divide-y divide-gray-200\">\r\n                {items.map((item) => (\r\n                  <li key={item.id} className=\"flex py-6\">\r\n                    <div className=\"h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200\">\r\n                      <img\r\n                        // src={item.product.thumbnail}\r\n                        src={item.product?.thumbnail}\r\n\r\n                        alt={item.product?.title}\r\n                        className=\"h-full w-full object-cover object-center\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"ml-4 flex flex-1 flex-col\">\r\n                      <div>\r\n                        <div className=\"flex justify-between text-base font-medium text-gray-900\">\r\n                          <h3>\r\n                            <a href={item.product?.id}>{item.product.title}</a>\r\n                          </h3>\r\n                           \r\n                          <p className=\"ml-4\">Rs.{Math.round(item.product.price*(1-item.product.discountPercentage/100))}</p>\r\n                        </div>\r\n                        <p className=\"mt-1 text-sm text-gray-500\">\r\n                          {item.product.brand}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"flex flex-1 items-end justify-between text-sm\">\r\n                        <div className=\"text-gray-500\">\r\n                          <label\r\n                            htmlFor=\"quantity\"\r\n                            className=\"inline mr-5 text-sm font-medium leading-6 text-gray-900\"\r\n                          >\r\n                            Qty\r\n                          </label>\r\n                          <select\r\n                            onChange={(e) => handleQuantity(e, item)}\r\n                            value={item.quantity}\r\n                          >\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                          </select>\r\n                        </div>\r\n\r\n                        <div className=\"flex\">\r\n                          <Modal\r\n                            title={`Delete ${item.product.title}`}\r\n                            message=\"Are you sure you want to delete this Cart item ?\"\r\n                            dangerOption=\"Delete\"\r\n                            cancelOption=\"Cancel\"\r\n                            dangerAction={(e) => handleRemove(e, item.id)}\r\n                            cancelAction={()=>setOpenModal(null)}\r\n                            showModal={openModal === item.id}\r\n                          ></Modal>\r\n                          <button\r\n                            onClick={e=>{setOpenModal(item.id)}}\r\n                            type=\"button\"\r\n                            className=\"font-medium text-indigo-600 hover:text-indigo-500\"\r\n                          >\r\n                            Remove\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\r\n            <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n              <p>Subtotal</p>\r\n              <p>Rs. {totalAmountbeforetax} </p>\r\n              \r\n            </div>\r\n            <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n              <p>Total Tax</p>\r\n              <p>Rs. {taxprice} </p>\r\n              \r\n            </div>\r\n            <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n              <p>Total Amount After Tax</p>\r\n              <p>Rs. {totalAmount}</p>\r\n              \r\n            </div>\r\n            <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n              <p>Total Items in Cart</p>\r\n              <p>{totalItems} items</p>\r\n            </div>\r\n            <p className=\"mt-0.5 text-sm text-gray-500\">\r\n              Shipping and taxes calculated at checkout.\r\n            </p>\r\n            <div className=\"mt-6\">\r\n              <Link\r\n                to=\"/checkout\"\r\n                className=\"flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700\"\r\n              >\r\n                Checkout\r\n              </Link>\r\n            </div>\r\n            <div className=\"mt-6 flex justify-center text-center text-sm text-gray-500\">\r\n              <p>\r\n                or\r\n                <Link to=\"/\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"font-medium text-indigo-600 hover:text-indigo-500\"\r\n                  >\r\n                    Continue Shopping\r\n                    <span aria-hidden=\"true\"> &rarr;</span>\r\n                  </button>\r\n                </Link>\r\n              <div className=\"mt-6 flex justify-center text-center text-sm text-gray-500\"> \r\n                <p> \r\n                  <button \r\n                    type=\"button\" \r\n                    className=\"font-medium text-red-600 hover:text-red-500\" \r\n                    onClick={handleDeleteAllItems} // Add the click handler \r\n                  > \r\n                    Delete Entire Cart \r\n                  </button> \r\n                </p> \r\n              </div>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Signup.js",["320","321"],[],"import { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport { selectLoggedInUser, createUserAsync } from '../authSlice';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nexport default function Signup() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectLoggedInUser);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n\r\n  return (\r\n    <>\r\n      {user && <Navigate to=\"/\" replace={true}></Navigate>}\r\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <img\r\n            className=\"mx-auto h-10 w-auto\"\r\n            src=\"/ecommerce.png\"\r\n            alt=\"Your Company\"\r\n          />\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\r\n            Create a New Account\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form\r\n            noValidate\r\n            className=\"space-y-6\"\r\n            onSubmit={handleSubmit((data) => {\r\n              dispatch(\r\n                createUserAsync({\r\n                  email: data.email,\r\n                  password: data.password,\r\n                  addresses: [],\r\n                  role:'user'\r\n                })\r\n              );\r\n              console.log(data);\r\n            })}\r\n          >\r\n            <div>\r\n              <label\r\n                htmlFor=\"email\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Email address\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"email\"\r\n                  {...register('email', {\r\n                    required: 'email is required',\r\n                    pattern: {\r\n                      value: /\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b/gi,\r\n                      message: 'email not valid',\r\n                    },\r\n                  })}\r\n                  type=\"email\"\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                />\r\n                {errors.email && (\r\n                  <p className=\"text-red-500\">{errors.email.message}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Password\r\n                </label>\r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"password\"\r\n                  {...register('password', {\r\n                    required: 'password is required',\r\n                    pattern: {\r\n                      value:\r\n                        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,\r\n                      message: `- at least 8 characters\\n\r\n                      - must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number\\n\r\n                      - Can contain special characters`,\r\n                    },\r\n                  })}\r\n                  type=\"password\"\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                />\r\n                {errors.password && (\r\n                  <p className=\"text-red-500\">{errors.password.message}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Confirm Password\r\n                </label>\r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"confirmPassword\"\r\n                  {...register('confirmPassword', {\r\n                    required: 'confirm password is required',\r\n                    validate: (value, formValues) =>\r\n                      value === formValues.password || 'password not matching',\r\n                  })}\r\n                  type=\"password\"\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                />\r\n                {errors.confirmPassword && (\r\n                  <p className=\"text-red-500\">\r\n                    {errors.confirmPassword.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n              >\r\n                Sign Up\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n            Already a Member?{' '}\r\n            <Link\r\n              to=\"/login\"\r\n              className=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\"\r\n            >\r\n              Log In\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\Login.js",["322","323"],[],"import { useSelector, useDispatch } from 'react-redux';\r\nimport { selectError, selectLoggedInUser } from '../authSlice';\r\nimport { Link, Navigate } from 'react-router-dom';\r\nimport { loginUserAsync } from '../authSlice';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nexport default function Login() {\r\n  const dispatch = useDispatch();\r\n  const error = useSelector(selectError);\r\n  const user = useSelector(selectLoggedInUser);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n\r\n  return (\r\n    <>\r\n      {user && <Navigate to=\"/\" replace={true}></Navigate>}\r\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <img\r\n            className=\"mx-auto h-10 w-auto\"\r\n            src=\"/ecommerce.png\"\r\n            alt=\"Your Company\"\r\n          />\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\r\n            Log in to your account\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form\r\n            noValidate\r\n            onSubmit={handleSubmit((data) => {\r\n              dispatch(\r\n                loginUserAsync({ email: data.email, password: data.password })\r\n              );\r\n            })}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div>\r\n              <label\r\n                htmlFor=\"email\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Email address\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"email\"\r\n                  {...register('email', {\r\n                    required: 'email is required',\r\n                    pattern: {\r\n                      value: /\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b/gi,\r\n                      message: 'email not valid',\r\n                    },\r\n                  })}\r\n                  type=\"email\"\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                />\r\n                {errors.email && (\r\n                  <p className=\"text-red-500\">{errors.email.message}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Password\r\n                </label>\r\n                <div className=\"text-sm\">\r\n                  <Link\r\n                    to=\"/forgot-password\"\r\n                    className=\"font-semibold text-indigo-600 hover:text-indigo-500\"\r\n                  >\r\n                    Forgot password?\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"password\"\r\n                  {...register('password', {\r\n                    required: 'password is required',\r\n                  })}\r\n                  type=\"password\"\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                />\r\n                {errors.password && (\r\n                  <p className=\"text-red-500\">{errors.password.message}</p>\r\n                )}\r\n              </div>\r\n              {error && <p className=\"text-red-500\">{error || error.message}</p>}\r\n            </div>\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n              >\r\n                Log in\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n            Not a member?{' '}\r\n            <Link\r\n              to=\"/signup\"\r\n              className=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\"\r\n            >\r\n              Create an Account\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\pages\\CheckoutForm.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\navbar\\Navbar.js",["324","325"],[],"import { Fragment } from 'react';\r\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\r\nimport {\r\n  Bars3Icon,\r\n  ShoppingCartIcon,\r\n  XMarkIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectItems } from '../cart/cartSlice';\r\nimport { selectLoggedInUser } from '../auth/authSlice';\r\nimport { selectUserInfo } from '../user/userSlice';\r\n\r\n\r\nconst navigation = [\r\n  { name: 'Products', link: '/', user: true },\r\n  { name: 'Products', link: '/admin', admin: true },\r\n  { name: 'Orders', link: '/admin/orders', admin: true },\r\n\r\n];\r\nconst userNavigation = [\r\n  { name: 'My Profile', link: '/profile' },\r\n  { name: 'My Orders', link: '/my-orders' },\r\n  { name: 'Sign out', link: '/logout' },\r\n];\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nfunction NavBar({ children }) {\r\n  const items = useSelector(selectItems);\r\n  const userInfo = useSelector(selectUserInfo);\r\n\r\n  return (\r\n    <>\r\n      {userInfo &&<div className=\"min-h-full\">\r\n        <Disclosure as=\"nav\" className=\"bg-gray-800\">\r\n          {({ open }) => (\r\n            <>\r\n              <div className=\"mx-auto max-w-8xl px-4 sm:px-6 lg:px-8\">\r\n                <div className=\"flex h-16 items-center justify-between\">\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"flex-shrink-0\">\r\n                      <Link to=\"/\">\r\n                        <img\r\n                          className=\"h-8 w-8\"\r\n                          src=\"/ecommerce.png\"\r\n                          alt=\"Your Company\"\r\n                        />\r\n                        <img\r\n                          className=''\r\n                          src='swiftmart.png'\r\n                        />\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"hidden md:block\">\r\n                      <div className=\"ml-10 flex items-baseline space-x-4\">\r\n                        {navigation.map((item) =>\r\n                          item[userInfo.role] ? (\r\n                            <Link\r\n                              key={item.name}\r\n                              to={item.link}\r\n                              className={classNames(\r\n                                item.current\r\n                                  ? 'bg-gray-900 text-white'\r\n                                  : 'text-gray-300 hover:bg-gray-700 hover:text-white',\r\n                                'rounded-md px-3 py-2 text-sm font-medium'\r\n                              )}\r\n                              aria-current={item.current ? 'page' : undefined}\r\n                            >\r\n                              {item.name}\r\n                            </Link>\r\n                          ) : null\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"hidden md:block\">\r\n                    <div className=\"ml-4 flex items-center md:ml-6\">\r\n                      <Link to=\"/cart\">\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\"\r\n                        >\r\n                          <span className=\"sr-only\">View notifications</span>\r\n                          <ShoppingCartIcon\r\n                            className=\"h-6 w-6\"\r\n                            aria-hidden=\"true\"\r\n                          />\r\n                        </button>\r\n                      </Link>\r\n                      {items.length > 0 && (\r\n                        <span className=\"inline-flex items-center rounded-md mb-7 -ml-3 bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\r\n                          {items.length}\r\n                        </span>\r\n                      )}\r\n\r\n                      {/* Profile dropdown */}\r\n                      <Menu as=\"div\" className=\"relative ml-3\">\r\n                        <div>\r\n                          <Menu.Button className=\"flex max-w-xs items-center rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\r\n                            <span className=\"sr-only\">Open user menu</span>\r\n                            <img\r\n                              className=\"h-8 w-8 rounded-full\"\r\n                              src={userInfo.imageUrl}\r\n                              alt=\"\"\r\n                            />\r\n                          </Menu.Button>\r\n                        </div>\r\n                        <Transition\r\n                          as={Fragment}\r\n                          enter=\"transition ease-out duration-100\"\r\n                          enterFrom=\"transform opacity-0 scale-95\"\r\n                          enterTo=\"transform opacity-100 scale-100\"\r\n                          leave=\"transition ease-in duration-75\"\r\n                          leaveFrom=\"transform opacity-100 scale-100\"\r\n                          leaveTo=\"transform opacity-0 scale-95\"\r\n                        >\r\n                          <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\r\n                            {userNavigation.map((item) => (\r\n                              <Menu.Item key={item.name}>\r\n                                {({ active }) => (\r\n                                  <Link\r\n                                    to={item.link}\r\n                                    className={classNames(\r\n                                      active ? 'bg-gray-100' : '',\r\n                                      'block px-4 py-2 text-sm text-gray-700'\r\n                                    )}\r\n                                  >\r\n                                    {item.name}\r\n                                  </Link>\r\n                                )}\r\n                              </Menu.Item>\r\n                            ))}\r\n                          </Menu.Items>\r\n                        </Transition>\r\n                      </Menu>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"-mr-2 flex md:hidden\">\r\n                    {/* Mobile menu button */}\r\n                    <Disclosure.Button className=\"inline-flex items-center justify-center rounded-md bg-gray-800 p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\r\n                      <span className=\"sr-only\">Open main menu</span>\r\n                      {open ? (\r\n                        <XMarkIcon\r\n                          className=\"block h-6 w-6\"\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                      ) : (\r\n                        <Bars3Icon\r\n                          className=\"block h-6 w-6\"\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                      )}\r\n                    </Disclosure.Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Disclosure.Panel className=\"md:hidden\">\r\n                <div className=\"space-y-1 px-2 pb-3 pt-2 sm:px-3\">\r\n                  {navigation.map((item) => (\r\n                    <Disclosure.Button\r\n                      key={item.name}\r\n                      as=\"a\"\r\n                      href={item.href}\r\n                      className={classNames(\r\n                        item.current\r\n                          ? 'bg-gray-900 text-white'\r\n                          : 'text-gray-300 hover:bg-gray-700 hover:text-white',\r\n                        'block rounded-md px-3 py-2 text-base font-medium'\r\n                      )}\r\n                      aria-current={item.current ? 'page' : undefined}\r\n                    >\r\n                      {item.name}\r\n                    </Disclosure.Button>\r\n                  ))}\r\n                </div>\r\n                <div className=\"border-t border-gray-700 pb-3 pt-4\">\r\n                  <div className=\"flex items-center px-5\">\r\n                    <div className=\"flex-shrink-0\">\r\n                      <img\r\n                        className=\"h-10 w-10 rounded-full\"\r\n                        src={userInfo.imageUrl}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"ml-3\">\r\n                      <div className=\"text-base font-medium leading-none text-white\">\r\n                        {/* this should come from userInfo */}\r\n                        {userInfo.name}\r\n                      </div>\r\n                      <div className=\"text-sm font-medium leading-none text-gray-400\">\r\n                        {userInfo.email}\r\n                      </div>\r\n                    </div>\r\n                    <Link to=\"/cart\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"ml-auto flex-shrink-0 rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\"\r\n                      >\r\n                        <ShoppingCartIcon\r\n                          className=\"h-6 w-6\"\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                      </button>\r\n                    </Link>\r\n                    {items.length > 0 && (\r\n                      <span className=\"inline-flex items-center rounded-md bg-red-50 mb-7 -ml-3 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\r\n                        {items.length}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mt-3 space-y-1 px-2\">\r\n                    {userNavigation.map((item) => (\r\n                      <Disclosure.Button\r\n                        key={item.name}\r\n                        as=\"a\"\r\n                        href={item.href}\r\n                        className=\"block rounded-md px-3 py-2 text-base font-medium text-gray-400 hover:bg-gray-700 hover:text-white\"\r\n                      >\r\n                        {item.name}\r\n                      </Disclosure.Button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </Disclosure.Panel>\r\n            </>\r\n          )}\r\n        </Disclosure>\r\n\r\n        <header className=\"bg-white shadow\">\r\n          <div className=\"mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8\">\r\n            <h1 className=\"text-3xl font-bold tracking-tight text-gray-900\">\r\n              E-Commerce\r\n            </h1>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          <div className=\"mx-auto max-w-7xl py-6 sm:px-6 lg:px-8\">\r\n            {children}\r\n          </div>\r\n        </main>\r\n      </div>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\ForgotPassword.js",["326","327"],[],"import { Link } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { resetPasswordRequestAsync, selectMailSent } from '../authSlice';\r\n\r\nexport default function ForgotPassword() {\r\n\r\n const mailSent = useSelector(selectMailSent);\r\n  const dispatch = useDispatch()\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  console.log(errors);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <img\r\n            className=\"mx-auto h-10 w-auto\"\r\n            src=\"/ecommerce.png\"\r\n            alt=\"Your Company\"\r\n          />\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\r\n            Enter email to reset password\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form\r\n            noValidate\r\n            onSubmit={handleSubmit((data) => {\r\n              console.log(data);\r\n              dispatch(resetPasswordRequestAsync(data.email))\r\n              \r\n            })}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div>\r\n              <label\r\n                htmlFor=\"email\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Email address\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"email\"\r\n                  {...register('email', {\r\n                    required: 'email is required',\r\n                    pattern: {\r\n                      value: /\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b/gi,\r\n                      message: 'email not valid',\r\n                    },\r\n                  })}\r\n                  type=\"email\"\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                />\r\n                {errors.email && (\r\n                  <p className=\"text-red-500\">{errors.email.message}</p>\r\n                )}\r\n                {mailSent && (\r\n                  <p className=\"text-green-500\">Mail Sent</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n              >\r\n                Send Email\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n            Send me back to{' '}\r\n            <Link\r\n              to=\"/login\"\r\n              className=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\"\r\n            >\r\n              Login\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\common\\Footer.js",["328","329"],[],"function Footer() {\r\n  return (\r\n    <>\r\n      <div className=\" bg-gray-900\">\r\n        <div className=\"max-w-2xl mx-auto text-white py-10\">\r\n          <div className=\"text-center\">\r\n            <h3 className=\"text-3xl mb-3\"> Download our SwiftMart </h3>\r\n            <p> Buy what you want. </p>\r\n            <div className=\"flex justify-center my-10\">\r\n              <div className=\"flex items-center border w-auto rounded-lg px-4 py-2 w-52 mx-2\">\r\n                <img\r\n                  src=\"https://cdn-icons-png.flaticon.com/512/888/888857.png\"\r\n                  className=\"w-7 md:w-8\"\r\n                />\r\n                <div className=\"text-left ml-3\">\r\n                  <p className=\"text-xs text-gray-200\">Download on </p>\r\n                  <p className=\"text-sm md:text-base\"> Google Play Store </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center border w-auto rounded-lg px-4 py-2 w-44 mx-2\">\r\n                <img\r\n                  src=\"https://cdn-icons-png.flaticon.com/512/888/888841.png\"\r\n                  className=\"w-7 md:w-8\"\r\n                />\r\n                <div className=\"text-left ml-3\">\r\n                  <p className=\"text-xs text-gray-200\">Download on </p>\r\n                  <p className=\"text-sm md:text-base\"> Apple Store </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-28 flex flex-col md:flex-row md:justify-between items-center text-sm text-gray-400\">\r\n            <p className=\"order-2 md:order-1 mt-8 md:mt-0\">\r\n              {' '}\r\n              © CoderDost, 2023.{' '}\r\n            </p>\r\n            <div className=\"order-1 md:order-2\">\r\n              <span className=\"px-2\">About us</span>\r\n              <span className=\"px-2 border-l\">Contact us</span>\r\n              <span className=\"px-2 border-l\">Privacy Policy</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","D:\\ecommerceweb\\frontend\\src\\features\\product\\components\\ProductList.js",["330","331","332"],[],"import React, { useState, Fragment, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchBrandsAsync,\r\n  fetchCategoriesAsync,\r\n  fetchProductsByFiltersAsync,\r\n  selectAllProducts,\r\n  selectBrands,\r\n  selectCategories,\r\n  selectProductListStatus,\r\n  selectTotalItems,\r\n} from '../productSlice';\r\nimport { Dialog, Disclosure, Menu, Transition } from '@headlessui/react';\r\nimport { XMarkIcon } from '@heroicons/react/24/outline';\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  StarIcon,\r\n} from '@heroicons/react/20/solid';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  ChevronDownIcon,\r\n  FunnelIcon,\r\n  MinusIcon,\r\n  PlusIcon,\r\n  Squares2X2Icon,\r\n} from '@heroicons/react/20/solid';\r\nimport { ITEMS_PER_PAGE } from '../../../app/constants';\r\nimport Pagination from '../../common/Pagination';\r\nimport { Grid } from 'react-loader-spinner';\r\n\r\nconst sortOptions = [\r\n  { name: 'Best Rating', sort: 'rating', order: 'desc', current: false },\r\n  { name: 'Price: Low to High', sort: 'discountPrice', order: 'asc', current: false },\r\n  { name: 'Price: High to Low', sort: 'discountPrice', order: 'desc', current: false },\r\n];\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nexport default function ProductList() {\r\n  const dispatch = useDispatch();\r\n  const products = useSelector(selectAllProducts);\r\n  const brands = useSelector(selectBrands);\r\n  const categories = useSelector(selectCategories);\r\n  const totalItems = useSelector(selectTotalItems);\r\n  const status = useSelector(selectProductListStatus);\r\n  const filters = [\r\n    {\r\n      id: 'category',\r\n      name: 'Category',\r\n      options: categories,\r\n    },\r\n    {\r\n      id: 'brand',\r\n      name: 'Brands',\r\n      options: brands,\r\n    },\r\n  ];\r\n\r\n  const [filter, setFilter] = useState({});\r\n  const [sort, setSort] = useState({});\r\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n\r\n  const handleFilter = (e, section, option) => {\r\n    console.log(e.target.checked);\r\n    const newFilter = { ...filter };\r\n    if (e.target.checked) {\r\n      if (newFilter[section.id]) {\r\n        newFilter[section.id].push(option.value);\r\n      } else {\r\n        newFilter[section.id] = [option.value];\r\n      }\r\n    } else {\r\n      const index = newFilter[section.id].findIndex(\r\n        (el) => el === option.value\r\n      );\r\n      newFilter[section.id].splice(index, 1);\r\n    }\r\n    console.log({ newFilter });\r\n\r\n    setFilter(newFilter);\r\n  };\r\n\r\n  const handleSort = (e, option) => {\r\n    const sort = { _sort: option.sort, _order: option.order };\r\n    console.log({ sort });\r\n    setSort(sort);\r\n  };\r\n\r\n  const handlePage = (page) => {\r\n    console.log({ page });\r\n    setPage(page);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const pagination = { _page: page, _limit: ITEMS_PER_PAGE };\r\n    dispatch(fetchProductsByFiltersAsync({ filter, sort, pagination }));\r\n  }, [dispatch, filter, sort, page]);\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n  }, [totalItems, sort]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchBrandsAsync());\r\n    dispatch(fetchCategoriesAsync());\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-white\">\r\n      <div>\r\n        <MobileFilter\r\n          handleFilter={handleFilter}\r\n          mobileFiltersOpen={mobileFiltersOpen}\r\n          setMobileFiltersOpen={setMobileFiltersOpen}\r\n          filters={filters}\r\n        ></MobileFilter>\r\n\r\n        <main className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-baseline justify-between border-b border-gray-200 pb-6 pt-24\">\r\n            <h1 className=\"text-4xl font-bold tracking-tight text-gray-900\">\r\n              All Products\r\n            </h1>\r\n\r\n            <div className=\"flex items-center\">\r\n              <Menu as=\"div\" className=\"relative inline-block text-left\">\r\n                <div>\r\n                  <Menu.Button className=\"group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900\">\r\n                    Sort\r\n                    <ChevronDownIcon\r\n                      className=\"-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                  </Menu.Button>\r\n                </div>\r\n\r\n                <Transition\r\n                  as={Fragment}\r\n                  enter=\"transition ease-out duration-100\"\r\n                  enterFrom=\"transform opacity-0 scale-95\"\r\n                  enterTo=\"transform opacity-100 scale-100\"\r\n                  leave=\"transition ease-in duration-75\"\r\n                  leaveFrom=\"transform opacity-100 scale-100\"\r\n                  leaveTo=\"transform opacity-0 scale-95\"\r\n                >\r\n                  <Menu.Items className=\"absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\">\r\n                    <div className=\"py-1\">\r\n                      {sortOptions.map((option) => (\r\n                        <Menu.Item key={option.name}>\r\n                          {({ active }) => (\r\n                            <p\r\n                              onClick={(e) => handleSort(e, option)}\r\n                              className={classNames(\r\n                                option.current\r\n                                  ? 'font-medium text-gray-900'\r\n                                  : 'text-gray-500',\r\n                                active ? 'bg-gray-100' : '',\r\n                                'block px-4 py-2 text-sm'\r\n                              )}\r\n                            >\r\n                              {option.name}\r\n                            </p>\r\n                          )}\r\n                        </Menu.Item>\r\n                      ))}\r\n                    </div>\r\n                  </Menu.Items>\r\n                </Transition>\r\n              </Menu>\r\n\r\n              <button\r\n                type=\"button\"\r\n                className=\"-m-2 ml-5 p-2 text-gray-400 hover:text-gray-500 sm:ml-7\"\r\n              >\r\n                <span className=\"sr-only\">View grid</span>\r\n                <Squares2X2Icon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"-m-2 ml-4 p-2 text-gray-400 hover:text-gray-500 sm:ml-6 lg:hidden\"\r\n                onClick={() => setMobileFiltersOpen(true)}\r\n              >\r\n                <span className=\"sr-only\">Filters</span>\r\n                <FunnelIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <section aria-labelledby=\"products-heading\" className=\"pb-24 pt-6\">\r\n            <h2 id=\"products-heading\" className=\"sr-only\">\r\n              Products\r\n            </h2>\r\n\r\n            <div className=\"grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4\">\r\n              <DesktopFilter\r\n                handleFilter={handleFilter}\r\n                filters={filters}\r\n              ></DesktopFilter>\r\n              {/* Product grid */}\r\n              <div className=\"lg:col-span-3\">\r\n                <ProductGrid products={products} status={status}></ProductGrid>\r\n              </div>\r\n              {/* Product grid end */}\r\n            </div>\r\n          </section>\r\n\r\n          {/* section of product and filters ends */}\r\n          <Pagination\r\n            page={page}\r\n            setPage={setPage}\r\n            handlePage={handlePage}\r\n            totalItems={totalItems}\r\n          ></Pagination>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MobileFilter({\r\n  mobileFiltersOpen,\r\n  setMobileFiltersOpen,\r\n  handleFilter,\r\n  filters,\r\n}) {\r\n  return (\r\n    <Transition.Root show={mobileFiltersOpen} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        className=\"relative z-40 lg:hidden\"\r\n        onClose={setMobileFiltersOpen}\r\n      >\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"transition-opacity ease-linear duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"transition-opacity ease-linear duration-300\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\r\n        </Transition.Child>\r\n\r\n        <div className=\"fixed inset-0 z-40 flex\">\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"transition ease-in-out duration-300 transform\"\r\n            enterFrom=\"translate-x-full\"\r\n            enterTo=\"translate-x-0\"\r\n            leave=\"transition ease-in-out duration-300 transform\"\r\n            leaveFrom=\"translate-x-0\"\r\n            leaveTo=\"translate-x-full\"\r\n          >\r\n            <Dialog.Panel className=\"relative ml-auto flex h-full w-full max-w-xs flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl\">\r\n              <div className=\"flex items-center justify-between px-4\">\r\n                <h2 className=\"text-lg font-medium text-gray-900\">Filters</h2>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400\"\r\n                  onClick={() => setMobileFiltersOpen(false)}\r\n                >\r\n                  <span className=\"sr-only\">Close menu</span>\r\n                  <XMarkIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n                </button>\r\n              </div>\r\n\r\n              {/* Filters */}\r\n              <form className=\"mt-4 border-t border-gray-200\">\r\n                {filters.map((section) => (\r\n                  <Disclosure\r\n                    as=\"div\"\r\n                    key={section.id}\r\n                    className=\"border-t border-gray-200 px-4 py-6\"\r\n                  >\r\n                    {({ open }) => (\r\n                      <>\r\n                        <h3 className=\"-mx-2 -my-3 flow-root\">\r\n                          <Disclosure.Button className=\"flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500\">\r\n                            <span className=\"font-medium text-gray-900\">\r\n                              {section.name}\r\n                            </span>\r\n                            <span className=\"ml-6 flex items-center\">\r\n                              {open ? (\r\n                                <MinusIcon\r\n                                  className=\"h-5 w-5\"\r\n                                  aria-hidden=\"true\"\r\n                                />\r\n                              ) : (\r\n                                <PlusIcon\r\n                                  className=\"h-5 w-5\"\r\n                                  aria-hidden=\"true\"\r\n                                />\r\n                              )}\r\n                            </span>\r\n                          </Disclosure.Button>\r\n                        </h3>\r\n                        <Disclosure.Panel className=\"pt-6\">\r\n                          <div className=\"space-y-6\">\r\n                            {section.options.map((option, optionIdx) => (\r\n                              <div\r\n                                key={option.value}\r\n                                className=\"flex items-center\"\r\n                              >\r\n                                <input\r\n                                  id={`filter-mobile-${section.id}-${optionIdx}`}\r\n                                  name={`${section.id}[]`}\r\n                                  defaultValue={option.value}\r\n                                  type=\"checkbox\"\r\n                                  defaultChecked={option.checked}\r\n                                  onChange={(e) =>\r\n                                    handleFilter(e, section, option)\r\n                                  }\r\n                                  className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\r\n                                />\r\n                                <label\r\n                                  htmlFor={`filter-mobile-${section.id}-${optionIdx}`}\r\n                                  className=\"ml-3 min-w-0 flex-1 text-gray-500\"\r\n                                >\r\n                                  {option.label}\r\n                                </label>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </Disclosure.Panel>\r\n                      </>\r\n                    )}\r\n                  </Disclosure>\r\n                ))}\r\n              </form>\r\n            </Dialog.Panel>\r\n          </Transition.Child>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  );\r\n}\r\n\r\nfunction DesktopFilter({ handleFilter, filters }) {\r\n  return (\r\n    <form className=\"hidden lg:block\">\r\n      {filters.map((section) => (\r\n        <Disclosure\r\n          as=\"div\"\r\n          key={section.id}\r\n          className=\"border-b border-gray-200 py-6\"\r\n        >\r\n          {({ open }) => (\r\n            <>\r\n              <h3 className=\"-my-3 flow-root\">\r\n                <Disclosure.Button className=\"flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500\">\r\n                  <span className=\"font-medium text-gray-900\">\r\n                    {section.name}\r\n                  </span>\r\n                  <span className=\"ml-6 flex items-center\">\r\n                    {open ? (\r\n                      <MinusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n                    ) : (\r\n                      <PlusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n                    )}\r\n                  </span>\r\n                </Disclosure.Button>\r\n              </h3>\r\n              <Disclosure.Panel className=\"pt-6\">\r\n                <div className=\"space-y-4\">\r\n                  {section.options.map((option, optionIdx) => (\r\n                    <div key={option.value} className=\"flex items-center\">\r\n                      <input\r\n                        id={`filter-${section.id}-${optionIdx}`}\r\n                        name={`${section.id}[]`}\r\n                        defaultValue={option.value}\r\n                        type=\"checkbox\"\r\n                        defaultChecked={option.checked}\r\n                        onChange={(e) => handleFilter(e, section, option)}\r\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\r\n                      />\r\n                      <label\r\n                        htmlFor={`filter-${section.id}-${optionIdx}`}\r\n                        className=\"ml-3 text-sm text-gray-600\"\r\n                      >\r\n                        {option.label}\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Disclosure.Panel>\r\n            </>\r\n          )}\r\n        </Disclosure>\r\n      ))}\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction ProductGrid({ products, status }) {\r\n  return (\r\n    <div className=\"bg-white\">\r\n      <div className=\"mx-auto max-w-2xl px-4 py-0 sm:px-6 sm:py-0 lg:max-w-7xl lg:px-8\">\r\n        <div className=\"mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8\">\r\n          {status === 'loading' ? (\r\n            <Grid\r\n              height=\"80\"\r\n              width=\"80\"\r\n              color=\"rgb(79, 70, 229) \"\r\n              ariaLabel=\"grid-loading\"\r\n              radius=\"12.5\"\r\n              wrapperStyle={{}}\r\n              wrapperClass=\"\"\r\n              visible={true}\r\n            />\r\n          ) : null}\r\n          {products.map((product) => (\r\n            <Link to={`/product-detail/${product.id}`} key={product.id}>\r\n              <div className=\"group relative border-solid border-2 p-2 border-gray-200\">\r\n                <div className=\"min-h-60 aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-60\">\r\n                  <img\r\n                    src={product.thumbnail}\r\n                    alt={product.title}\r\n                    className=\"h-full w-full object-cover object-center lg:h-full lg:w-full\"\r\n                  />\r\n                </div>\r\n                <div className=\"mt-4 flex justify-between\">\r\n                  <div>\r\n                    <h3 className=\"text-sm text-gray-700\">\r\n                      <div href={product.thumbnail}>\r\n                        <span aria-hidden=\"true\" className=\"absolute inset-0\" />\r\n                        {product.title}\r\n                      </div>\r\n                    </h3>\r\n                    <p className=\"mt-1 text-sm text-gray-500\">\r\n                      <StarIcon className=\"w-6 h-6 inline\"></StarIcon>\r\n                      <span className=\" align-bottom\">{product.rating}</span>\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm block font-medium text-gray-900\">\r\n                      Rs. {Math.round(product.price*(1-product.discountPercentage/100))} \r\n                    </p>\r\n                    <p className=\"text-sm block line-through font-medium text-gray-400\">\r\n                      Rs. {product.price}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                {product.deleted && (\r\n                  <div>\r\n                    <p className=\"text-sm text-red-400\">product deleted</p>\r\n                  </div>\r\n                )}\r\n                {product.stock <= 0 && (\r\n                  <div>\r\n                    <p className=\"text-sm text-red-400\">out of stock</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\product\\components\\ProductDetail.js",["333","334","335"],[],"import { useState, useEffect } from 'react';\r\nimport { StarIcon } from '@heroicons/react/20/solid';\r\nimport { RadioGroup } from '@headlessui/react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  fetchProductByIdAsync,\r\n  selectProductById,\r\n  selectProductListStatus,\r\n} from '../productSlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { addToCartAsync, selectItems } from '../../cart/cartSlice';\r\nimport { selectLoggedInUser } from '../../auth/authSlice';\r\nimport { useAlert } from 'react-alert';\r\nimport { Grid } from 'react-loader-spinner';\r\n\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\n\r\nexport default function ProductDetail() {\r\n  const [selectedColor, setSelectedColor] = useState();\r\n  const [selectedSize, setSelectedSize] = useState();\r\n  const items = useSelector(selectItems);\r\n  const product = useSelector(selectProductById);\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const alert = useAlert();\r\n  const status = useSelector(selectProductListStatus);\r\n\r\n  const handleCart = (e) => {\r\n    e.preventDefault();\r\n    if (items.findIndex((item) => item.product.id === product.id) < 0) {\r\n      console.log({ items, product });\r\n      const newItem = {\r\n        product: product.id,\r\n        quantity: 1,\r\n      };\r\n      if (selectedColor) {\r\n        newItem.color = selectedColor;\r\n      }\r\n      if (selectedSize) {\r\n        newItem.size = selectedSize;\r\n      }\r\n      dispatch(addToCartAsync({item:newItem, alert}));\r\n    } else {\r\n      alert.error('Item Already added');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProductByIdAsync(params.id));\r\n  }, [dispatch, params.id]);\r\n\r\n  return (\r\n    <div className=\"bg-white\">\r\n      {status === 'loading' ? (\r\n        <Grid\r\n          height=\"80\"\r\n          width=\"80\"\r\n          color=\"rgb(79, 70, 229) \"\r\n          ariaLabel=\"grid-loading\"\r\n          radius=\"12.5\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"\"\r\n          visible={true}\r\n        />\r\n      ) : null}\r\n      {product && (\r\n        <div className=\"pt-6\">\r\n          <nav aria-label=\"Breadcrumb\">\r\n            <ol className=\"mx-auto flex max-w-2xl items-center space-x-2 px-4 sm:px-6 lg:max-w-7xl lg:px-8\">\r\n              {product.breadcrumbs &&\r\n                product.breadcrumbs.map((breadcrumb) => (\r\n                  <li key={breadcrumb.id}>\r\n                    <div className=\"flex items-center\">\r\n                      <a\r\n                        href={breadcrumb.href}\r\n                        className=\"mr-2 text-sm font-medium text-gray-900\"\r\n                      >\r\n                        {breadcrumb.name}\r\n                      </a>\r\n                      <svg\r\n                        width={16}\r\n                        height={20}\r\n                        viewBox=\"0 0 16 20\"\r\n                        fill=\"currentColor\"\r\n                        aria-hidden=\"true\"\r\n                        className=\"h-5 w-4 text-gray-300\"\r\n                      >\r\n                        <path d=\"M5.697 4.34L8.98 16.532h1.327L7.025 4.341H5.697z\" />\r\n                      </svg>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              <li className=\"text-sm\">\r\n                <a\r\n                  href={product.href}\r\n                  aria-current=\"page\"\r\n                  className=\"font-medium text-gray-500 hover:text-gray-600\"\r\n                >\r\n                  {product.title}\r\n                </a>\r\n              </li>\r\n            </ol>\r\n          </nav>\r\n\r\n          {/* Image gallery */}\r\n          <div className=\"mx-auto mt-6 max-w-2xl sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:gap-x-8 lg:px-8\">\r\n            <div className=\"aspect-h-4 aspect-w-3 hidden overflow-hidden rounded-lg lg:block\">\r\n              <img\r\n                src={product.images[0]}\r\n                alt={product.title}\r\n                className=\"h-full w-full object-cover object-center\"\r\n              />\r\n            </div>\r\n            <div className=\"hidden lg:grid lg:grid-cols-1 lg:gap-y-8\">\r\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\r\n                <img\r\n                  src={product.images[1]}\r\n                  alt={product.title}\r\n                  className=\"h-full w-full object-cover object-center\"\r\n                />\r\n              </div>\r\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\r\n                <img\r\n                  src={product.images[2]}\r\n                  alt={product.title}\r\n                  className=\"h-full w-full object-cover object-center\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"aspect-h-5 aspect-w-4 lg:aspect-h-4 lg:aspect-w-3 sm:overflow-hidden sm:rounded-lg\">\r\n              <img\r\n                src={product.images[3]}\r\n                alt={product.title}\r\n                className=\"h-full w-full object-cover object-center\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Product info */}\r\n          <div className=\"mx-auto max-w-2xl px-4 pb-16 pt-10 sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 lg:px-8 lg:pb-24 lg:pt-16\">\r\n            <div className=\"lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8\">\r\n              <h1 className=\"text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl\">\r\n                {product.title}\r\n              </h1>\r\n            </div>\r\n\r\n            {/* Options */}\r\n            <div className=\"mt-4 lg:row-span-3 lg:mt-0\">\r\n              <h2 className=\"sr-only\">Product information</h2>\r\n              <p className=\"text-xl line-through tracking-tight text-gray-900\">\r\n                Rs. {product.price}\r\n                \r\n                \r\n                \r\n                \r\n              </p>\r\n              <p className='text-xl text-red-900'>{product.discountPercentage}% off</p>\r\n              <p className=\"text-5xl tracking-tight text-black-900\">\r\n                {/* Rs. {product.discountPrice} */}\r\n                Rs. {Math.round(product.price*(1-product.discountPercentage/100))} \r\n\r\n\r\n              </p>\r\n\r\n              {/* Reviews */}\r\n              <div className=\"mt-6\">\r\n                <h3 className=\"sr-only\">Reviews</h3>\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"flex items-center\">\r\n                    {[0, 1, 2, 3, 4].map((rating) => (\r\n                      <StarIcon\r\n                        key={rating}\r\n                        className={classNames(\r\n                          product.rating > rating\r\n                            ? 'text-gray-900'\r\n                            : 'text-gray-200',\r\n                          'h-5 w-5 flex-shrink-0'\r\n                        )}\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <p className=\"sr-only\">{product.rating} out of 5 stars</p>\r\n                </div>\r\n              </div>\r\n\r\n              <form className=\"mt-10\">\r\n                {/* Colors */}\r\n                {product.colors && product.colors.length > 0 && (\r\n                  <div>\r\n                    <h3 className=\"text-sm font-medium text-gray-900\">Color</h3>\r\n\r\n                    <RadioGroup\r\n                      value={selectedColor}\r\n                      onChange={setSelectedColor}\r\n                      className=\"mt-4\"\r\n                    >\r\n                      <RadioGroup.Label className=\"sr-only\">\r\n                        Choose a color\r\n                      </RadioGroup.Label>\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        {product.colors.map((color) => (\r\n                          <RadioGroup.Option\r\n                            key={color.name}\r\n                            value={color}\r\n                            className={({ active, checked }) =>\r\n                              classNames(\r\n                                color.selectedClass,\r\n                                active && checked ? 'ring ring-offset-1' : '',\r\n                                !active && checked ? 'ring-2' : '',\r\n                                'relative -m-0.5 flex cursor-pointer items-center justify-center rounded-full p-0.5 focus:outline-none'\r\n                              )\r\n                            }\r\n                          >\r\n                            <RadioGroup.Label as=\"span\" className=\"sr-only\">\r\n                              {color.name}\r\n                            </RadioGroup.Label>\r\n                            <span\r\n                              aria-hidden=\"true\"\r\n                              className={classNames(\r\n                                color.class,\r\n                                'h-8 w-8 rounded-full border border-black border-opacity-10'\r\n                              )}\r\n                            />\r\n                          </RadioGroup.Option>\r\n                        ))}\r\n                      </div>\r\n                    </RadioGroup>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Sizes */}\r\n                {product.sizes && product.sizes.length > 0 && (\r\n                  <div className=\"mt-10\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <h3 className=\"text-sm font-medium text-gray-900\">\r\n                        Size\r\n                      </h3>\r\n                      <a\r\n                        href=\"#\"\r\n                        className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\r\n                      >\r\n                        Size guide\r\n                      </a>\r\n                    </div>\r\n\r\n                    <RadioGroup\r\n                      value={selectedSize}\r\n                      onChange={setSelectedSize}\r\n                      className=\"mt-4\"\r\n                    >\r\n                      <RadioGroup.Label className=\"sr-only\">\r\n                        Choose a size\r\n                      </RadioGroup.Label>\r\n                      <div className=\"grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4\">\r\n                        {product.sizes.map((size) => (\r\n                          <RadioGroup.Option\r\n                            key={size.name}\r\n                            value={size}\r\n                            disabled={!size.inStock}\r\n                            className={({ active }) =>\r\n                              classNames(\r\n                                size.inStock\r\n                                  ? 'cursor-pointer bg-white text-gray-900 shadow-sm'\r\n                                  : 'cursor-not-allowed bg-gray-50 text-gray-200',\r\n                                active ? 'ring-2 ring-indigo-500' : '',\r\n                                'group relative flex items-center justify-center rounded-md border py-3 px-4 text-sm font-medium uppercase hover:bg-gray-50 focus:outline-none sm:flex-1 sm:py-6'\r\n                              )\r\n                            }\r\n                          >\r\n                            {({ active, checked }) => (\r\n                              <>\r\n                                <RadioGroup.Label as=\"span\">\r\n                                  {size.name}\r\n                                </RadioGroup.Label>\r\n                                {size.inStock ? (\r\n                                  <span\r\n                                    className={classNames(\r\n                                      active ? 'border' : 'border-2',\r\n                                      checked\r\n                                        ? 'border-indigo-500'\r\n                                        : 'border-transparent',\r\n                                      'pointer-events-none absolute -inset-px rounded-md'\r\n                                    )}\r\n                                    aria-hidden=\"true\"\r\n                                  />\r\n                                ) : (\r\n                                  <span\r\n                                    aria-hidden=\"true\"\r\n                                    className=\"pointer-events-none absolute -inset-px rounded-md border-2 border-gray-200\"\r\n                                  >\r\n                                    <svg\r\n                                      className=\"absolute inset-0 h-full w-full stroke-2 text-gray-200\"\r\n                                      viewBox=\"0 0 100 100\"\r\n                                      preserveAspectRatio=\"none\"\r\n                                      stroke=\"currentColor\"\r\n                                    >\r\n                                      <line\r\n                                        x1={0}\r\n                                        y1={100}\r\n                                        x2={100}\r\n                                        y2={0}\r\n                                        vectorEffect=\"non-scaling-stroke\"\r\n                                      />\r\n                                    </svg>\r\n                                  </span>\r\n                                )}\r\n                              </>\r\n                            )}\r\n                          </RadioGroup.Option>\r\n                        ))}\r\n                      </div>\r\n                    </RadioGroup>\r\n                  </div>\r\n                )}\r\n\r\n                <button\r\n                  onClick={handleCart}\r\n                  type=\"submit\"\r\n                  className=\"mt-10 flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\r\n                >\r\n                  Add to Cart\r\n                </button>\r\n              </form>\r\n            </div>\r\n\r\n            <div className=\"py-10 lg:col-span-2 lg:col-start-1 lg:border-r lg:border-gray-200 lg:pb-16 lg:pr-8 lg:pt-6\">\r\n              {/* Description and details */}\r\n              <div>\r\n                <h3 className=\"sr-only\">Description</h3>\r\n\r\n                <div className=\"space-y-6\">\r\n                  <p className=\"text-base text-gray-900\">\r\n                    {product.description}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              {product.highlights && (\r\n                <div className=\"mt-10\">\r\n                  <h3 className=\"text-sm font-medium text-gray-900\">\r\n                    Highlights\r\n                  </h3>\r\n\r\n                  <div className=\"mt-4\">\r\n                    <ul\r\n                      role=\"list\"\r\n                      className=\"list-disc space-y-2 pl-4 text-sm\"\r\n                    >\r\n                      {product.highlights.map((highlight) => (\r\n                        <li key={highlight} className=\"text-gray-400\">\r\n                          <span className=\"text-gray-600\">{highlight}</span>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"mt-10\">\r\n                <h2 className=\"text-sm font-medium text-gray-900\">Details</h2>\r\n\r\n                <div className=\"mt-4 space-y-6\">\r\n                  <p className=\"text-sm text-gray-600\">{product.description}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\user\\userAPI.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\cart\\cartAPI.js",["336"],[],"export function addToCart(item) {\r\n  return new Promise(async (resolve) => {\r\n    const response = await fetch('/cart', {\r\n      method: 'POST',\r\n      body: JSON.stringify(item),\r\n      headers: { 'content-type': 'application/json' },\r\n    });\r\n    const data = await response.json();\r\n    resolve({ data });\r\n  });\r\n}\r\n\r\nexport function fetchItemsByUserId() {\r\n  return new Promise(async (resolve) => {\r\n    const response = await fetch('/cart');\r\n    const data = await response.json();\r\n    resolve({ data });\r\n  });\r\n}\r\n\r\nexport function updateCart(update) {\r\n  return new Promise(async (resolve) => {\r\n    const response = await fetch('/cart/' + update.id, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(update),\r\n      headers: { 'content-type': 'application/json' },\r\n    });\r\n    const data = await response.json();\r\n    resolve({ data });\r\n  });\r\n}\r\n\r\nexport function deleteItemFromCart(itemId) {\r\n  return new Promise(async (resolve) => {\r\n    const response = await fetch('/cart/' + itemId, {\r\n      method: 'DELETE',\r\n      headers: { 'content-type': 'application/json' },\r\n    });\r\n    const data = await response.json();\r\n    resolve({ data: { id: itemId } });\r\n  });\r\n}\r\n\r\nexport function resetCart() {\r\n  // get all items of user's cart - and then delete each\r\n  return new Promise(async (resolve) => {\r\n    const response = await fetchItemsByUserId();\r\n    const items = response.data;\r\n    for (let item of items) {\r\n      await deleteItemFromCart(item.id);\r\n    }\r\n    resolve({ status: 'success' });\r\n  });\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\counter\\counterSlice.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\auth\\authAPI.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\auth\\components\\ResetPassword.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\user\\components\\UserProfile.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\user\\components\\UserOrders.js",["337"],[],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchLoggedInUserOrderAsync,\r\n  selectUserInfo,\r\n  selectUserInfoStatus,\r\n  selectUserOrders,\r\n} from '../userSlice';\r\nimport { Grid } from 'react-loader-spinner';\r\n\r\nexport default function UserOrders() {\r\n  const dispatch = useDispatch();\r\n  const orders = useSelector(selectUserOrders);\r\n  const status = useSelector(selectUserInfoStatus);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchLoggedInUserOrderAsync());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      {orders && orders.map((order) => (\r\n        <div key={order.id}>\r\n          <div>\r\n            <div className=\"mx-auto mt-12 bg-white max-w-7xl px-4 sm:px-6 lg:px-8\">\r\n              <div className=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\r\n                <h1 className=\"text-4xl my-5 font-bold tracking-tight text-gray-900\">\r\n                  Order # {order.id}\r\n                </h1>\r\n                <h3 className=\"text-xl my-5 font-bold tracking-tight text-red-900\">\r\n                  Order Status : {order.status}\r\n                </h3>\r\n                <div className=\"flow-root\">\r\n                  <ul className=\"-my-6 divide-y divide-gray-200\">\r\n                    {order.items.map((item) => (\r\n                      <li key={item.id} className=\"flex py-6\">\r\n                        <div className=\"h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200\">\r\n                          <img\r\n                            src={item.product.thumbnail}\r\n                            alt={item.product.title}\r\n                            className=\"h-full w-full object-cover object-center\"\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"ml-4 flex flex-1 flex-col\">\r\n                          <div>\r\n                            <div className=\"flex justify-between text-base font-medium text-gray-900\">\r\n                              <h3>\r\n                                <a href={item.product.id}>{item.product.title}</a>\r\n                              </h3>\r\n                              <p className=\"ml-4\">Rs.{Math.round(item.product.price * (1 - item.product.discountPercentage / 100))}</p>\r\n                            </div>\r\n                            <p className=\"mt-1 text-sm text-gray-500\">\r\n                              {item.product.brand}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"flex flex-1 items-end justify-between text-sm\">\r\n                            <div className=\"text-gray-500\">\r\n                              <label\r\n                                htmlFor=\"quantity\"\r\n                                className=\"inline mr-5 text-sm font-medium leading-6 text-gray-900\"\r\n                              >\r\n                                Qty :{item.quantity}\r\n                              </label>\r\n                            </div>\r\n\r\n                            <div className=\"flex\"></div>\r\n                          </div>\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\r\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n                  <p>Subtotal</p>\r\n                  <p>Rs. {order.totalAmount}</p>\r\n                </div>\r\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\r\n                  <p>Total Items in Cart</p>\r\n                  <p>{order.totalItems} items</p>\r\n                </div>\r\n                <p className=\"mt-0.5 text-sm text-gray-500\">\r\n                  Shipping Address :\r\n                </p>\r\n                <div className=\"flex justify-between gap-x-6 px-5 py-5 border-solid border-2 border-gray-200\">\r\n                  <div className=\"flex gap-x-4\">\r\n                    <div className=\"min-w-0 flex-auto\">\r\n                      <p className=\"text-sm font-semibold leading-6 text-gray-900\">\r\n                        {order.selectedAddress.name}\r\n                      </p>\r\n                      <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\r\n                        {order.selectedAddress.street}\r\n                      </p>\r\n                      <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\r\n                        {order.selectedAddress.pinCode}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"hidden sm:flex sm:flex-col sm:items-end\">\r\n                    <p className=\"text-sm leading-6 text-gray-900\">\r\n                      Phone: {order.selectedAddress.phone}\r\n                    </p>\r\n                    <p className=\"text-sm leading-6 text-gray-500\">\r\n                      {order.selectedAddress.city}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n       {status === 'loading' ? (\r\n        <Grid\r\n          height=\"80\"\r\n          width=\"80\"\r\n          color=\"rgb(79, 70, 229) \"\r\n          ariaLabel=\"grid-loading\"\r\n          radius=\"12.5\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"\"\r\n          visible={true}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\product\\productAPI.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\AdminOrders.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\ProductForm.js",["338"],[],"import { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  clearSelectedProduct,\r\n  createProductAsync,\r\n  fetchProductByIdAsync,\r\n  selectBrands,\r\n  selectCategories,\r\n  selectProductById,\r\n  updateProductAsync,\r\n} from '../../product/productSlice';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport Modal from '../../common/Modal';\r\nimport { useAlert } from 'react-alert';\r\n\r\nfunction ProductForm() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const brands = useSelector(selectBrands);\r\n  const categories = useSelector(selectCategories);\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const selectedProduct = useSelector(selectProductById);\r\n  const [openModal, setOpenModal] = useState(null);\r\n  const alert = useAlert();\r\n\r\n  const colors = [\r\n    {\r\n      name: 'White',\r\n      class: 'bg-white',\r\n      selectedClass: 'ring-gray-400',\r\n      id: 'white',\r\n    },\r\n    {\r\n      name: 'Gray',\r\n      class: 'bg-gray-200',\r\n      selectedClass: 'ring-gray-400',\r\n      id: 'gray',\r\n    },\r\n    {\r\n      name: 'Black',\r\n      class: 'bg-gray-900',\r\n      selectedClass: 'ring-gray-900',\r\n      id: 'black',\r\n    },\r\n  ];\r\n\r\n  const sizes = [\r\n    { name: 'XXS', inStock: true, id: 'xxs' },\r\n    { name: 'XS', inStock: true, id: 'xs' },\r\n    { name: 'S', inStock: true, id: 's' },\r\n    { name: 'M', inStock: true, id: 'm' },\r\n    { name: 'L', inStock: true, id: 'l' },\r\n    { name: 'XL', inStock: true, id: 'xl' },\r\n    { name: '2XL', inStock: true, id: '2xl' },\r\n    { name: '3XL', inStock: true, id: '3xl' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (params.id) {\r\n      dispatch(fetchProductByIdAsync(params.id));\r\n    } else {\r\n      dispatch(clearSelectedProduct());\r\n    }\r\n  }, [params.id, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (selectedProduct && params.id) {\r\n      setValue('title', selectedProduct.title);\r\n      setValue('description', selectedProduct.description);\r\n      setValue('price', selectedProduct.price);\r\n      setValue('discountPercentage', selectedProduct.discountPercentage);\r\n      setValue('thumbnail', selectedProduct.thumbnail);\r\n      setValue('stock', selectedProduct.stock);\r\n      setValue('image1', selectedProduct.images[0]);\r\n      setValue('image2', selectedProduct.images[1]);\r\n      setValue('image3', selectedProduct.images[2]);\r\n      setValue('brand', selectedProduct.brand);\r\n      setValue('category', selectedProduct.category);\r\n      setValue('highlight1', selectedProduct.highlights[0]);\r\n      setValue('highlight2', selectedProduct.highlights[1]);\r\n      setValue('highlight3', selectedProduct.highlights[2]);\r\n      setValue('highlight4', selectedProduct.highlights[3]);\r\n      setValue(\r\n        'sizes',\r\n        selectedProduct.sizes.map((size) => size.id)\r\n      );\r\n      setValue(\r\n        'colors',\r\n        selectedProduct.colors.map((color) => color.id)\r\n      );\r\n    }\r\n  }, [selectedProduct, params.id, setValue]);\r\n\r\n  const handleDelete = () => {\r\n    const product = { ...selectedProduct };\r\n    product.deleted = true;\r\n    dispatch(updateProductAsync(product));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        noValidate\r\n        onSubmit={handleSubmit((data) => {\r\n          console.log(data);\r\n          const product = { ...data };\r\n          product.images = [\r\n            product.image1,\r\n            product.image2,\r\n            product.image3,\r\n            product.thumbnail,\r\n          ];\r\n          product.highlights = [\r\n            product.highlight1,\r\n            product.highlight2,\r\n            product.highlight3,\r\n            product.highlight4,\r\n          ];\r\n          product.rating = 0;\r\n          if (product.colors) {\r\n            product.colors = product.colors.map((color) =>\r\n              colors.find((clr) => clr.id === color)\r\n            );\r\n          }\r\n          if (product.sizes) {\r\n            product.sizes = product.sizes.map((size) =>\r\n              sizes.find((sz) => sz.id === size)\r\n            );\r\n          }\r\n\r\n          delete product['image1'];\r\n          delete product['image2'];\r\n          delete product['image3'];\r\n          product.price = +product.price;\r\n          product.stock = +product.stock;\r\n          product.discountPercentage = +product.discountPercentage;\r\n          console.log(product);\r\n          if (params.id) {\r\n            product.id = params.id;\r\n            product.rating = selectedProduct.rating || 0;\r\n            dispatch(updateProductAsync(product));\r\n            alert.success('Product Updated');\r\n\r\n            reset();\r\n          } else {\r\n            dispatch(createProductAsync(product));\r\n            alert.success('Product Created');\r\n            reset();\r\n          }\r\n        })}\r\n      >\r\n        <div className=\"space-y-12 bg-white p-12\">\r\n          <div className=\"border-b border-gray-900/10 pb-12\">\r\n            <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\r\n              Add Product\r\n            </h2>\r\n\r\n            <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\r\n              {selectedProduct && selectedProduct.deleted && (\r\n                <h2 className=\"text-red-500 sm:col-span-6\">\r\n                  This product is deleted\r\n                </h2>\r\n              )}\r\n\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"title\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Product Name\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('title', {\r\n                        required: 'name is required',\r\n                      })}\r\n                      id=\"title\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-span-full\">\r\n                <label\r\n                  htmlFor=\"description\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Description\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <textarea\r\n                    id=\"description\"\r\n                    {...register('description', {\r\n                      required: 'description is required',\r\n                    })}\r\n                    rows={3}\r\n                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                    defaultValue={''}\r\n                  />\r\n                </div>\r\n                <p className=\"mt-3 text-sm leading-6 text-gray-600\">\r\n                  Write a few sentences about product.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"col-span-full\">\r\n                <label\r\n                  htmlFor=\"brand\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Brand\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <select\r\n                    {...register('brand', {\r\n                      required: 'brand is required',\r\n                    })}\r\n                  >\r\n                    <option value=\"\">--choose brand--</option>\r\n                    {brands.map((brand) => (\r\n                      <option key={brand.value} value={brand.value}>\r\n                        {brand.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-span-full\">\r\n                <label\r\n                  htmlFor=\"colors\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Colors\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  {colors.map((color) => (\r\n                    <>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        {...register('colors', {})}\r\n                        key={color.id}\r\n                        value={color.id}\r\n                      />{' '}\r\n                      {color.name}\r\n                    </>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-span-full\">\r\n                <label\r\n                  htmlFor=\"sizes\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Sizes\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  {sizes.map((size) => (\r\n                    <>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        {...register('sizes', {})}\r\n                        key={size.id}\r\n                        value={size.id}\r\n                      />{' '}\r\n                      {size.name}\r\n                    </>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-span-full\">\r\n                <label\r\n                  htmlFor=\"category\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Category\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <select\r\n                    {...register('category', {\r\n                      required: 'category is required',\r\n                    })}\r\n                  >\r\n                    <option value=\"\">--choose category--</option>\r\n                    {categories.map((category) => (\r\n                      <option key={category.value} value={category.value}>\r\n                        {category.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-2\">\r\n                <label\r\n                  htmlFor=\"price\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Price\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"number\"\r\n                      {...register('price', {\r\n                        required: 'price is required',\r\n                        min: 1,\r\n                        max: 10000,\r\n                      })}\r\n                      id=\"price\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-2\">\r\n                <label\r\n                  htmlFor=\"discountPercentage\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Discount Percentage\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"number\"\r\n                      {...register('discountPercentage', {\r\n                        required: 'discountPercentage is required',\r\n                        min: 0,\r\n                        max: 100,\r\n                      })}\r\n                      id=\"discountPercentage\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-2\">\r\n                <label\r\n                  htmlFor=\"stock\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Stock\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"number\"\r\n                      {...register('stock', {\r\n                        required: 'stock is required',\r\n                        min: 0,\r\n                      })}\r\n                      id=\"stock\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"thumbnail\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Thumbnail\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('thumbnail', {\r\n                        required: 'thumbnail is required',\r\n                      })}\r\n                      id=\"thumbnail\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"image1\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Image 1\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('image1', {\r\n                        required: 'image1 is required',\r\n                      })}\r\n                      id=\"image1\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"image2\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Image 2\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('image2', {\r\n                        required: 'image is required',\r\n                      })}\r\n                      id=\"image2\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"image2\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Image 3\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('image3', {\r\n                        required: 'image is required',\r\n                      })}\r\n                      id=\"image3\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"highlight1\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Highlight 1\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('highlight1', {})}\r\n                      id=\"highlight1\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"highlight2\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Highlight 2\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('highlight2', {})}\r\n                      id=\"highlight2\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"highlight3\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Highlight 3\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('highlight3', {})}\r\n                      id=\"highlight3\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"sm:col-span-6\">\r\n                <label\r\n                  htmlFor=\"highlight4\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Highlight 4\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\r\n                    <input\r\n                      type=\"text\"\r\n                      {...register('highlight4', {})}\r\n                      id=\"highlight4\"\r\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"border-b border-gray-900/10 pb-12\">\r\n            <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\r\n              Extra{' '}\r\n            </h2>\r\n\r\n            <div className=\"mt-10 space-y-10\">\r\n              <fieldset>\r\n                <legend className=\"text-sm font-semibold leading-6 text-gray-900\">\r\n                  By Email\r\n                </legend>\r\n                <div className=\"mt-6 space-y-6\">\r\n                  <div className=\"relative flex gap-x-3\">\r\n                    <div className=\"flex h-6 items-center\">\r\n                      <input\r\n                        id=\"comments\"\r\n                        name=\"comments\"\r\n                        type=\"checkbox\"\r\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"text-sm leading-6\">\r\n                      <label\r\n                        htmlFor=\"comments\"\r\n                        className=\"font-medium text-gray-900\"\r\n                      >\r\n                        Comments\r\n                      </label>\r\n                      <p className=\"text-gray-500\">\r\n                        Get notified when someones posts a comment on a posting.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"relative flex gap-x-3\">\r\n                    <div className=\"flex h-6 items-center\">\r\n                      <input\r\n                        id=\"candidates\"\r\n                        name=\"candidates\"\r\n                        type=\"checkbox\"\r\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"text-sm leading-6\">\r\n                      <label\r\n                        htmlFor=\"candidates\"\r\n                        className=\"font-medium text-gray-900\"\r\n                      >\r\n                        Candidates\r\n                      </label>\r\n                      <p className=\"text-gray-500\">\r\n                        Get notified when a candidate applies for a job.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"relative flex gap-x-3\">\r\n                    <div className=\"flex h-6 items-center\">\r\n                      <input\r\n                        id=\"offers\"\r\n                        name=\"offers\"\r\n                        type=\"checkbox\"\r\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"text-sm leading-6\">\r\n                      <label\r\n                        htmlFor=\"offers\"\r\n                        className=\"font-medium text-gray-900\"\r\n                      >\r\n                        Offers\r\n                      </label>\r\n                      <p className=\"text-gray-500\">\r\n                        Get notified when a candidate accepts or rejects an\r\n                        offer.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </fieldset>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-6 flex items-center justify-end gap-x-6\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"text-sm font-semibold leading-6 text-gray-900\"\r\n          >\r\n            Cancel\r\n          </button>\r\n\r\n          {selectedProduct && !selectedProduct.deleted && (\r\n            <button\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setOpenModal(true);\r\n              }}\r\n              className=\"rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n            >\r\n              Delete\r\n            </button>\r\n          )}\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n      {selectedProduct && (\r\n        <Modal\r\n          title={`Delete ${selectedProduct.title}`}\r\n          message=\"Are you sure you want to delete this Product ?\"\r\n          dangerOption=\"Delete\"\r\n          cancelOption=\"Cancel\"\r\n          dangerAction={handleDelete}\r\n          cancelAction={() => setOpenModal(null)}\r\n          showModal={openModal}\r\n        ></Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProductForm;\r\n","D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\AdminProductList.js",["339"],[],"import React, { useState, Fragment, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchBrandsAsync,\r\n  fetchCategoriesAsync,\r\n  fetchProductsByFiltersAsync,\r\n  selectAllProducts,\r\n  selectBrands,\r\n  selectCategories,\r\n  selectTotalItems,\r\n} from '../../product/productSlice';\r\nimport { Dialog, Disclosure, Menu, Transition } from '@headlessui/react';\r\nimport { XMarkIcon } from '@heroicons/react/24/outline';\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  StarIcon,\r\n} from '@heroicons/react/20/solid';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  ChevronDownIcon,\r\n  FunnelIcon,\r\n  MinusIcon,\r\n  PlusIcon,\r\n  Squares2X2Icon,\r\n} from '@heroicons/react/20/solid';\r\nimport { ITEMS_PER_PAGE } from '../../../app/constants';\r\n\r\nconst sortOptions = [\r\n  { name: 'Best Rating', sort: 'rating', order: 'desc', current: false },\r\n  { name: 'Price: Low to High', sort: 'discountPrice', order: 'asc', current: false },\r\n  { name: 'Price: High to Low', sort: 'discountPrice', order: 'desc', current: false },\r\n];\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nexport default function AdminProductList() {\r\n  const dispatch = useDispatch();\r\n  const products = useSelector(selectAllProducts);\r\n  const brands = useSelector(selectBrands);\r\n  const categories = useSelector(selectCategories);\r\n  const totalItems = useSelector(selectTotalItems);\r\n  const filters = [\r\n    {\r\n      id: 'category',\r\n      name: 'Category',\r\n      options: categories,\r\n    },\r\n    {\r\n      id: 'brand',\r\n      name: 'Brands',\r\n      options: brands,\r\n    },\r\n  ];\r\n\r\n  const [filter, setFilter] = useState({});\r\n  const [sort, setSort] = useState({});\r\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const handleFilter = (e, section, option) => {\r\n    console.log(e.target.checked);\r\n    const newFilter = { ...filter };\r\n    if (e.target.checked) {\r\n      if (newFilter[section.id]) {\r\n        newFilter[section.id].push(option.value);\r\n      } else {\r\n        newFilter[section.id] = [option.value];\r\n      }\r\n    } else {\r\n      const index = newFilter[section.id].findIndex(\r\n        (el) => el === option.value\r\n      );\r\n      newFilter[section.id].splice(index, 1);\r\n    }\r\n    console.log({ newFilter });\r\n\r\n    setFilter(newFilter);\r\n  };\r\n\r\n  const handleSort = (e, option) => {\r\n    const sort = { _sort: option.sort, _order: option.order };\r\n    console.log({ sort });\r\n    setSort(sort);\r\n  };\r\n\r\n  const handlePage = (page) => {\r\n    console.log({ page });\r\n    setPage(page);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const pagination = { _page: page, _limit: ITEMS_PER_PAGE };\r\n    dispatch(fetchProductsByFiltersAsync({ filter, sort, pagination, admin:true }));\r\n  }, [dispatch, filter, sort, page]);\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n  }, [totalItems, sort]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchBrandsAsync());\r\n    dispatch(fetchCategoriesAsync());\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-white\">\r\n      <div>\r\n        <MobileFilter\r\n          handleFilter={handleFilter}\r\n          mobileFiltersOpen={mobileFiltersOpen}\r\n          setMobileFiltersOpen={setMobileFiltersOpen}\r\n          filters={filters}\r\n        ></MobileFilter>\r\n\r\n        <main className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-baseline justify-between border-b border-gray-200 pb-6 pt-24\">\r\n            <h1 className=\"text-4xl font-bold tracking-tight text-gray-900\">\r\n              All Products\r\n            </h1>\r\n\r\n            <div className=\"flex items-center\">\r\n              <Menu as=\"div\" className=\"relative inline-block text-left\">\r\n                <div>\r\n                  <Menu.Button className=\"group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900\">\r\n                    Sort\r\n                    <ChevronDownIcon\r\n                      className=\"-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                  </Menu.Button>\r\n                </div>\r\n\r\n                <Transition\r\n                  as={Fragment}\r\n                  enter=\"transition ease-out duration-100\"\r\n                  enterFrom=\"transform opacity-0 scale-95\"\r\n                  enterTo=\"transform opacity-100 scale-100\"\r\n                  leave=\"transition ease-in duration-75\"\r\n                  leaveFrom=\"transform opacity-100 scale-100\"\r\n                  leaveTo=\"transform opacity-0 scale-95\"\r\n                >\r\n                  <Menu.Items className=\"absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\">\r\n                    <div className=\"py-1\">\r\n                      {sortOptions.map((option) => (\r\n                        <Menu.Item key={option.name}>\r\n                          {({ active }) => (\r\n                            <p\r\n                              onClick={(e) => handleSort(e, option)}\r\n                              className={classNames(\r\n                                option.current\r\n                                  ? 'font-medium text-gray-900'\r\n                                  : 'text-gray-500',\r\n                                active ? 'bg-gray-100' : '',\r\n                                'block px-4 py-2 text-sm'\r\n                              )}\r\n                            >\r\n                              {option.name}\r\n                            </p>\r\n                          )}\r\n                        </Menu.Item>\r\n                      ))}\r\n                    </div>\r\n                  </Menu.Items>\r\n                </Transition>\r\n              </Menu>\r\n\r\n              <button\r\n                type=\"button\"\r\n                className=\"-m-2 ml-5 p-2 text-gray-400 hover:text-gray-500 sm:ml-7\"\r\n              >\r\n                <span className=\"sr-only\">View grid</span>\r\n                <Squares2X2Icon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"-m-2 ml-4 p-2 text-gray-400 hover:text-gray-500 sm:ml-6 lg:hidden\"\r\n                onClick={() => setMobileFiltersOpen(true)}\r\n              >\r\n                <span className=\"sr-only\">Filters</span>\r\n                <FunnelIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <section aria-labelledby=\"products-heading\" className=\"pb-24 pt-6\">\r\n            <h2 id=\"products-heading\" className=\"sr-only\">\r\n              Products\r\n            </h2>\r\n\r\n            <div className=\"grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4\">\r\n              <DesktopFilter\r\n                handleFilter={handleFilter}\r\n                filters={filters}\r\n              ></DesktopFilter>\r\n              {/* Product grid */}\r\n\r\n              <div className=\"lg:col-span-3\">\r\n                <div>\r\n                  <Link\r\n                    to=\"/admin/product-form\"\r\n                    className=\"rounded-md mx-10 my-5 bg-green-700 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n                  >\r\n                    Add New Product\r\n                  </Link>\r\n                </div>\r\n                <ProductGrid products={products}></ProductGrid>\r\n              </div>\r\n              {/* Product grid end */}\r\n            </div>\r\n          </section>\r\n\r\n          {/* section of product and filters ends */}\r\n          <Pagination\r\n            page={page}\r\n            setPage={setPage}\r\n            handlePage={handlePage}\r\n            totalItems={totalItems}\r\n          ></Pagination>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MobileFilter({\r\n  mobileFiltersOpen,\r\n  setMobileFiltersOpen,\r\n  handleFilter,\r\n  filters,\r\n}) {\r\n  return (\r\n    <Transition.Root show={mobileFiltersOpen} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        className=\"relative z-40 lg:hidden\"\r\n        onClose={setMobileFiltersOpen}\r\n      >\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"transition-opacity ease-linear duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"transition-opacity ease-linear duration-300\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\r\n        </Transition.Child>\r\n\r\n        <div className=\"fixed inset-0 z-40 flex\">\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"transition ease-in-out duration-300 transform\"\r\n            enterFrom=\"translate-x-full\"\r\n            enterTo=\"translate-x-0\"\r\n            leave=\"transition ease-in-out duration-300 transform\"\r\n            leaveFrom=\"translate-x-0\"\r\n            leaveTo=\"translate-x-full\"\r\n          >\r\n            <Dialog.Panel className=\"relative ml-auto flex h-full w-full max-w-xs flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl\">\r\n              <div className=\"flex items-center justify-between px-4\">\r\n                <h2 className=\"text-lg font-medium text-gray-900\">Filters</h2>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400\"\r\n                  onClick={() => setMobileFiltersOpen(false)}\r\n                >\r\n                  <span className=\"sr-only\">Close menu</span>\r\n                  <XMarkIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n                </button>\r\n              </div>\r\n\r\n              {/* Filters */}\r\n              <form className=\"mt-4 border-t border-gray-200\">\r\n                {filters.map((section) => (\r\n                  <Disclosure\r\n                    as=\"div\"\r\n                    key={section.id}\r\n                    className=\"border-t border-gray-200 px-4 py-6\"\r\n                  >\r\n                    {({ open }) => (\r\n                      <>\r\n                        <h3 className=\"-mx-2 -my-3 flow-root\">\r\n                          <Disclosure.Button className=\"flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500\">\r\n                            <span className=\"font-medium text-gray-900\">\r\n                              {section.name}\r\n                            </span>\r\n                            <span className=\"ml-6 flex items-center\">\r\n                              {open ? (\r\n                                <MinusIcon\r\n                                  className=\"h-5 w-5\"\r\n                                  aria-hidden=\"true\"\r\n                                />\r\n                              ) : (\r\n                                <PlusIcon\r\n                                  className=\"h-5 w-5\"\r\n                                  aria-hidden=\"true\"\r\n                                />\r\n                              )}\r\n                            </span>\r\n                          </Disclosure.Button>\r\n                        </h3>\r\n                        <Disclosure.Panel className=\"pt-6\">\r\n                          <div className=\"space-y-6\">\r\n                            {section.options.map((option, optionIdx) => (\r\n                              <div\r\n                                key={option.value}\r\n                                className=\"flex items-center\"\r\n                              >\r\n                                <input\r\n                                  id={`filter-mobile-${section.id}-${optionIdx}`}\r\n                                  name={`${section.id}[]`}\r\n                                  defaultValue={option.value}\r\n                                  type=\"checkbox\"\r\n                                  defaultChecked={option.checked}\r\n                                  onChange={(e) =>\r\n                                    handleFilter(e, section, option)\r\n                                  }\r\n                                  className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\r\n                                />\r\n                                <label\r\n                                  htmlFor={`filter-mobile-${section.id}-${optionIdx}`}\r\n                                  className=\"ml-3 min-w-0 flex-1 text-gray-500\"\r\n                                >\r\n                                  {option.label}\r\n                                </label>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </Disclosure.Panel>\r\n                      </>\r\n                    )}\r\n                  </Disclosure>\r\n                ))}\r\n              </form>\r\n            </Dialog.Panel>\r\n          </Transition.Child>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  );\r\n}\r\n\r\nfunction DesktopFilter({ handleFilter, filters }) {\r\n  return (\r\n    <form className=\"hidden lg:block\">\r\n      {filters.map((section) => (\r\n        <Disclosure\r\n          as=\"div\"\r\n          key={section.id}\r\n          className=\"border-b border-gray-200 py-6\"\r\n        >\r\n          {({ open }) => (\r\n            <>\r\n              <h3 className=\"-my-3 flow-root\">\r\n                <Disclosure.Button className=\"flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500\">\r\n                  <span className=\"font-medium text-gray-900\">\r\n                    {section.name}\r\n                  </span>\r\n                  <span className=\"ml-6 flex items-center\">\r\n                    {open ? (\r\n                      <MinusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n                    ) : (\r\n                      <PlusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n                    )}\r\n                  </span>\r\n                </Disclosure.Button>\r\n              </h3>\r\n              <Disclosure.Panel className=\"pt-6\">\r\n                <div className=\"space-y-4\">\r\n                  {section.options.map((option, optionIdx) => (\r\n                    <div key={option.value} className=\"flex items-center\">\r\n                      <input\r\n                        id={`filter-${section.id}-${optionIdx}`}\r\n                        name={`${section.id}[]`}\r\n                        defaultValue={option.value}\r\n                        type=\"checkbox\"\r\n                        defaultChecked={option.checked}\r\n                        onChange={(e) => handleFilter(e, section, option)}\r\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\r\n                      />\r\n                      <label\r\n                        htmlFor={`filter-${section.id}-${optionIdx}`}\r\n                        className=\"ml-3 text-sm text-gray-600\"\r\n                      >\r\n                        {option.label}\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Disclosure.Panel>\r\n            </>\r\n          )}\r\n        </Disclosure>\r\n      ))}\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction Pagination({ page, setPage, handlePage, totalItems }) {\r\n  const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);\r\n  return (\r\n    <div className=\"flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6\">\r\n      <div className=\"flex flex-1 justify-between sm:hidden\">\r\n        <div\r\n          onClick={(e) => handlePage(page > 1 ? page - 1 : page)}\r\n          className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\"\r\n        >\r\n          Previous\r\n        </div>\r\n        <div\r\n          onClick={(e) => handlePage(page < totalPages ? page + 1 : page)}\r\n          className=\"relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\"\r\n        >\r\n          Next\r\n        </div>\r\n      </div>\r\n      <div className=\"hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\r\n        <div>\r\n          <p className=\"text-sm text-gray-700\">\r\n            Showing{' '}\r\n            <span className=\"font-medium\">\r\n              {(page - 1) * ITEMS_PER_PAGE + 1}\r\n            </span>{' '}\r\n            to{' '}\r\n            <span className=\"font-medium\">\r\n              {page * ITEMS_PER_PAGE > totalItems\r\n                ? totalItems\r\n                : page * ITEMS_PER_PAGE}\r\n            </span>{' '}\r\n            of <span className=\"font-medium\">{totalItems}</span> results\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <nav\r\n            className=\"isolate inline-flex -space-x-px rounded-md shadow-sm\"\r\n            aria-label=\"Pagination\"\r\n          >\r\n            <div\r\n              onClick={(e) => handlePage(page > 1 ? page - 1 : page)}\r\n              className=\"relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\"\r\n            >\r\n              <span className=\"sr-only\">Previous</span>\r\n              <ChevronLeftIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n            </div>\r\n            {/* Current: \"z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\", Default: \"text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0\" */}\r\n\r\n            {Array.from({ length: totalPages }).map((el, index) => (\r\n              <div\r\n                key={index}\r\n                onClick={(e) => handlePage(index + 1)}\r\n                aria-current=\"page\"\r\n                className={`relative cursor-pointer z-10 inline-flex items-center ${\r\n                  index + 1 === page\r\n                    ? 'bg-indigo-600 text-white'\r\n                    : 'text-gray-400'\r\n                } px-4 py-2 text-sm font-semibold  focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600`}\r\n              >\r\n                {index + 1}\r\n              </div>\r\n            ))}\r\n\r\n            <div\r\n              onClick={(e) => handlePage(page < totalPages ? page + 1 : page)}\r\n              className=\"relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\"\r\n            >\r\n              <span className=\"sr-only\">Next</span>\r\n              <ChevronRightIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ProductGrid({ products }) {\r\n  return (\r\n    <div className=\"bg-white\">\r\n      <div className=\"mx-auto max-w-2xl px-4 py-0 sm:px-6 sm:py-0 lg:max-w-7xl lg:px-8\">\r\n        <div className=\"mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8\">\r\n          {products.map((product) => (\r\n            <div key={product.id}>\r\n              <Link to={`/product-detail/${product.id}`} >\r\n                <div className=\"group relative border-solid border-2 p-2 border-gray-200\">\r\n                  <div className=\"min-h-60 aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-60\">\r\n                    <img\r\n                      src={product.thumbnail}\r\n                      alt={product.title}\r\n                      className=\"h-full w-full object-cover object-center lg:h-full lg:w-full\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"mt-4 flex justify-between\">\r\n                    <div>\r\n                      <h3 className=\"text-sm text-gray-700\">\r\n                        <div href={product.thumbnail}>\r\n                          <span\r\n                            aria-hidden=\"true\"\r\n                            className=\"absolute inset-0\"\r\n                          />\r\n                          {product.title}\r\n                        </div>\r\n                      </h3>\r\n                      <p className=\"mt-1 text-sm text-gray-500\">\r\n                        <StarIcon className=\"w-6 h-6 inline\"></StarIcon>\r\n                        <span className=\" align-bottom\">{product.rating}</span>\r\n                      </p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-sm block font-medium text-gray-900\">\r\n                        \r\n                        Rs.{Math.round(product.price*(1-product.discountPercentage/100))} \r\n                      </p>\r\n                      <p className=\"text-sm block line-through font-medium text-gray-400\">\r\n                        Rs.{product.price}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  {product.deleted && (\r\n                    <div>\r\n                      <p className=\"text-sm text-red-400\">product deleted</p>\r\n                    </div>\r\n                  )}\r\n                  {product.stock<=0 && (\r\n                  <div>\r\n                    <p className=\"text-sm text-red-400\">out of stock</p>\r\n                  </div>\r\n                )}\r\n                </div>\r\n              </Link>\r\n              <div className=\"mt-5\">\r\n                <Link\r\n                  to={`/admin/product-form/edit/${product.id}`}\r\n                  className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n                >\r\n                  Edit Product\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\admin\\components\\AdminProductDetail.js",["340","341","342"],[],"import { useState, useEffect } from 'react';\r\nimport { StarIcon } from '@heroicons/react/20/solid';\r\nimport { RadioGroup } from '@headlessui/react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  fetchProductByIdAsync,\r\n  selectProductById,\r\n  selectProductListStatus,\r\n} from '../../product/productSlice';\r\nimport { useParams } from 'react-router-dom';\r\nimport { addToCartAsync, selectItems } from '../../cart/cartSlice';\r\nimport { selectLoggedInUser } from '../../auth/authSlice';\r\nimport { useAlert } from 'react-alert';\r\nimport { Grid } from 'react-loader-spinner';\r\n\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\n\r\nexport default function AdminProductDetail() {\r\n  const [selectedColor, setSelectedColor] = useState();\r\n  const [selectedSize, setSelectedSize] = useState();\r\n  const items = useSelector(selectItems);\r\n  const product = useSelector(selectProductById);\r\n  \r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const alert = useAlert();\r\n  const status = useSelector(selectProductListStatus);\r\n\r\n  const handleCart = (e) => {\r\n    e.preventDefault();\r\n    if (items.findIndex((item) => item.product.id === product.id) < 0) {\r\n      console.log({ items, product });\r\n      const newItem = {\r\n        product: product.id,\r\n        quantity: 1,\r\n      };\r\n      if (selectedColor) {\r\n        newItem.color = selectedColor;\r\n      }\r\n      if (selectedSize) {\r\n        newItem.size = selectedSize;\r\n      }\r\n      dispatch(addToCartAsync(newItem));\r\n      alert.success('Item added to Cart');\r\n    } else {\r\n      alert.error('Item Already added');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProductByIdAsync(params.id));\r\n  }, [dispatch, params.id]);\r\n\r\n  return (\r\n    <div className=\"bg-white\">\r\n      {status === 'loading' ? (\r\n        <Grid\r\n          height=\"80\"\r\n          width=\"80\"\r\n          color=\"rgb(79, 70, 229) \"\r\n          ariaLabel=\"grid-loading\"\r\n          radius=\"12.5\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"\"\r\n          visible={true}\r\n        />\r\n      ) : null}\r\n      {product && (\r\n        <div className=\"pt-6\">\r\n          <nav aria-label=\"Breadcrumb\">\r\n            <ol className=\"mx-auto flex max-w-2xl items-center space-x-2 px-4 sm:px-6 lg:max-w-7xl lg:px-8\">\r\n              {product.breadcrumbs &&\r\n                product.breadcrumbs.map((breadcrumb) => (\r\n                  <li key={breadcrumb.id}>\r\n                    <div className=\"flex items-center\">\r\n                      <a\r\n                        href={breadcrumb.href}\r\n                        className=\"mr-2 text-sm font-medium text-gray-900\"\r\n                      >\r\n                        {breadcrumb.name}\r\n                      </a>\r\n                      <svg\r\n                        width={16}\r\n                        height={20}\r\n                        viewBox=\"0 0 16 20\"\r\n                        fill=\"currentColor\"\r\n                        aria-hidden=\"true\"\r\n                        className=\"h-5 w-4 text-gray-300\"\r\n                      >\r\n                        <path d=\"M5.697 4.34L8.98 16.532h1.327L7.025 4.341H5.697z\" />\r\n                      </svg>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              <li className=\"text-sm\">\r\n                <a\r\n                  href={product.href}\r\n                  aria-current=\"page\"\r\n                  className=\"font-medium text-gray-500 hover:text-gray-600\"\r\n                >\r\n                  {product.title}\r\n                </a>\r\n              </li>\r\n            </ol>\r\n          </nav>\r\n\r\n          {/* Image gallery */}\r\n          <div className=\"mx-auto mt-6 max-w-2xl sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:gap-x-8 lg:px-8\">\r\n            <div className=\"aspect-h-4 aspect-w-3 hidden overflow-hidden rounded-lg lg:block\">\r\n              <img\r\n                src={product.images[0]}\r\n                alt={product.title}\r\n                className=\"h-full w-full object-cover object-center\"\r\n              />\r\n            </div>\r\n            <div className=\"hidden lg:grid lg:grid-cols-1 lg:gap-y-8\">\r\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\r\n                <img\r\n                  src={product.images[1]}\r\n                  alt={product.title}\r\n                  className=\"h-full w-full object-cover object-center\"\r\n                />\r\n              </div>\r\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\r\n                <img\r\n                  src={product.images[2]}\r\n                  alt={product.title}\r\n                  className=\"h-full w-full object-cover object-center\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"aspect-h-5 aspect-w-4 lg:aspect-h-4 lg:aspect-w-3 sm:overflow-hidden sm:rounded-lg\">\r\n              <img\r\n                src={product.images[3]}\r\n                alt={product.title}\r\n                className=\"h-full w-full object-cover object-center\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Product info */}\r\n          <div className=\"mx-auto max-w-2xl px-4 pb-16 pt-10 sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 lg:px-8 lg:pb-24 lg:pt-16\">\r\n            <div className=\"lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8\">\r\n              <h1 className=\"text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl\">\r\n                {product.title}\r\n              </h1>\r\n            </div>\r\n\r\n            {/* Options */}\r\n            <div className=\"mt-4 lg:row-span-3 lg:mt-0\">\r\n              <h2 className=\"sr-only\">Product information</h2>\r\n              <p className=\"text-xl line-through tracking-tight text-gray-900\">\r\n                Rs.{product.price}\r\n              </p>\r\n              <p className=\"text-3xl tracking-tight text-gray-900\">\r\n                \r\n                Rs.{Math.round(product.price*(1-product.discountPercentage/100))} \r\n              </p>\r\n\r\n              {/* Reviews */}\r\n              <div className=\"mt-6\">\r\n                <h3 className=\"sr-only\">Reviews</h3>\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"flex items-center\">\r\n                    {[0, 1, 2, 3, 4].map((rating) => (\r\n                      <StarIcon\r\n                        key={rating}\r\n                        className={classNames(\r\n                          product.rating > rating\r\n                            ? 'text-gray-900'\r\n                            : 'text-gray-200',\r\n                          'h-5 w-5 flex-shrink-0'\r\n                        )}\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <p className=\"sr-only\">{product.rating} out of 5 stars</p>\r\n                </div>\r\n              </div>\r\n\r\n              <form className=\"mt-10\">\r\n                {/* Colors */}\r\n                {product.colors && product.colors.length > 0 && (\r\n                  <div>\r\n                    <h3 className=\"text-sm font-medium text-gray-900\">Color</h3>\r\n\r\n                    <RadioGroup\r\n                      value={selectedColor}\r\n                      onChange={setSelectedColor}\r\n                      className=\"mt-4\"\r\n                    >\r\n                      <RadioGroup.Label className=\"sr-only\">\r\n                        Choose a color\r\n                      </RadioGroup.Label>\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        {product.colors.map((color) => (\r\n                          <RadioGroup.Option\r\n                            key={color.name}\r\n                            value={color}\r\n                            className={({ active, checked }) =>\r\n                              classNames(\r\n                                color.selectedClass,\r\n                                active && checked ? 'ring ring-offset-1' : '',\r\n                                !active && checked ? 'ring-2' : '',\r\n                                'relative -m-0.5 flex cursor-pointer items-center justify-center rounded-full p-0.5 focus:outline-none'\r\n                              )\r\n                            }\r\n                          >\r\n                            <RadioGroup.Label as=\"span\" className=\"sr-only\">\r\n                              {color.name}\r\n                            </RadioGroup.Label>\r\n                            <span\r\n                              aria-hidden=\"true\"\r\n                              className={classNames(\r\n                                color.class,\r\n                                'h-8 w-8 rounded-full border border-black border-opacity-10'\r\n                              )}\r\n                            />\r\n                          </RadioGroup.Option>\r\n                        ))}\r\n                      </div>\r\n                    </RadioGroup>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Sizes */}\r\n                {product.sizes && product.sizes.length > 0 && (\r\n                  <div className=\"mt-10\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <h3 className=\"text-sm font-medium text-gray-900\">\r\n                        Size\r\n                      </h3>\r\n                      <a\r\n                        href=\"#\"\r\n                        className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\r\n                      >\r\n                        Size guide\r\n                      </a>\r\n                    </div>\r\n\r\n                    <RadioGroup\r\n                      value={selectedSize}\r\n                      onChange={setSelectedSize}\r\n                      className=\"mt-4\"\r\n                    >\r\n                      <RadioGroup.Label className=\"sr-only\">\r\n                        Choose a size\r\n                      </RadioGroup.Label>\r\n                      <div className=\"grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4\">\r\n                        {product.sizes.map((size) => (\r\n                          <RadioGroup.Option\r\n                            key={size.name}\r\n                            value={size}\r\n                            disabled={!size.inStock}\r\n                            className={({ active }) =>\r\n                              classNames(\r\n                                size.inStock\r\n                                  ? 'cursor-pointer bg-white text-gray-900 shadow-sm'\r\n                                  : 'cursor-not-allowed bg-gray-50 text-gray-200',\r\n                                active ? 'ring-2 ring-indigo-500' : '',\r\n                                'group relative flex items-center justify-center rounded-md border py-3 px-4 text-sm font-medium uppercase hover:bg-gray-50 focus:outline-none sm:flex-1 sm:py-6'\r\n                              )\r\n                            }\r\n                          >\r\n                            {({ active, checked }) => (\r\n                              <>\r\n                                <RadioGroup.Label as=\"span\">\r\n                                  {size.name}\r\n                                </RadioGroup.Label>\r\n                                {size.inStock ? (\r\n                                  <span\r\n                                    className={classNames(\r\n                                      active ? 'border' : 'border-2',\r\n                                      checked\r\n                                        ? 'border-indigo-500'\r\n                                        : 'border-transparent',\r\n                                      'pointer-events-none absolute -inset-px rounded-md'\r\n                                    )}\r\n                                    aria-hidden=\"true\"\r\n                                  />\r\n                                ) : (\r\n                                  <span\r\n                                    aria-hidden=\"true\"\r\n                                    className=\"pointer-events-none absolute -inset-px rounded-md border-2 border-gray-200\"\r\n                                  >\r\n                                    <svg\r\n                                      className=\"absolute inset-0 h-full w-full stroke-2 text-gray-200\"\r\n                                      viewBox=\"0 0 100 100\"\r\n                                      preserveAspectRatio=\"none\"\r\n                                      stroke=\"currentColor\"\r\n                                    >\r\n                                      <line\r\n                                        x1={0}\r\n                                        y1={100}\r\n                                        x2={100}\r\n                                        y2={0}\r\n                                        vectorEffect=\"non-scaling-stroke\"\r\n                                      />\r\n                                    </svg>\r\n                                  </span>\r\n                                )}\r\n                              </>\r\n                            )}\r\n                          </RadioGroup.Option>\r\n                        ))}\r\n                      </div>\r\n                    </RadioGroup>\r\n                  </div>\r\n                )}\r\n\r\n                <button\r\n                  onClick={handleCart}\r\n                  type=\"submit\"\r\n                  className=\"mt-10 flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\r\n                >\r\n                  Add to Cart\r\n                </button>\r\n              </form>\r\n            </div>\r\n\r\n            <div className=\"py-10 lg:col-span-2 lg:col-start-1 lg:border-r lg:border-gray-200 lg:pb-16 lg:pr-8 lg:pt-6\">\r\n              {/* Description and details */}\r\n              <div>\r\n                <h3 className=\"sr-only\">Description</h3>\r\n\r\n                <div className=\"space-y-6\">\r\n                  <p className=\"text-base text-gray-900\">\r\n                    {product.description}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              {product.highlights && (\r\n                <div className=\"mt-10\">\r\n                  <h3 className=\"text-sm font-medium text-gray-900\">\r\n                    Highlights\r\n                  </h3>\r\n\r\n                  <div className=\"mt-4\">\r\n                    <ul\r\n                      role=\"list\"\r\n                      className=\"list-disc space-y-2 pl-4 text-sm\"\r\n                    >\r\n                      {product.highlights.map((highlight) => (\r\n                        <li key={highlight} className=\"text-gray-400\">\r\n                          <span className=\"text-gray-600\">{highlight}</span>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"mt-10\">\r\n                <h2 className=\"text-sm font-medium text-gray-900\">Details</h2>\r\n\r\n                <div className=\"mt-4 space-y-6\">\r\n                  <p className=\"text-sm text-gray-600\">{product.description}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\ecommerceweb\\frontend\\src\\features\\order\\orderAPI.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\common\\Modal.js",[],[],"D:\\ecommerceweb\\frontend\\src\\app\\constants.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\common\\Pagination.js",[],[],"D:\\ecommerceweb\\frontend\\src\\features\\counter\\counterAPI.js",[],[],{"ruleId":"343","severity":1,"message":"344","line":1,"column":10,"nodeType":"345","messageId":"346","endLine":1,"endColumn":17},{"ruleId":"343","severity":1,"message":"347","line":7,"column":31,"nodeType":"345","messageId":"346","endLine":7,"endColumn":35},{"ruleId":"343","severity":1,"message":"348","line":1,"column":26,"nodeType":"345","messageId":"346","endLine":1,"endColumn":39},{"ruleId":"343","severity":1,"message":"347","line":1,"column":10,"nodeType":"345","messageId":"346","endLine":1,"endColumn":14},{"ruleId":"349","severity":1,"message":"350","line":462,"column":19,"nodeType":"351","endLine":462,"endColumn":78},{"ruleId":"352","severity":1,"message":"353","line":29,"column":6,"nodeType":"354","endLine":29,"endColumn":8,"suggestions":"355"},{"ruleId":"343","severity":1,"message":"356","line":10,"column":10,"nodeType":"345","messageId":"346","endLine":10,"endColumn":20},{"ruleId":"343","severity":1,"message":"357","line":1,"column":17,"nodeType":"345","messageId":"346","endLine":1,"endColumn":25},{"ruleId":"343","severity":1,"message":"358","line":4,"column":3,"nodeType":"345","messageId":"346","endLine":4,"endColumn":12},{"ruleId":"343","severity":1,"message":"359","line":5,"column":3,"nodeType":"345","messageId":"346","endLine":5,"endColumn":17},{"ruleId":"343","severity":1,"message":"360","line":10,"column":9,"nodeType":"345","messageId":"346","endLine":10,"endColumn":14},{"ruleId":"343","severity":1,"message":"361","line":11,"column":9,"nodeType":"345","messageId":"346","endLine":11,"endColumn":17},{"ruleId":"343","severity":1,"message":"362","line":3,"column":10,"nodeType":"345","messageId":"346","endLine":3,"endColumn":17},{"ruleId":"343","severity":1,"message":"363","line":3,"column":19,"nodeType":"345","messageId":"346","endLine":3,"endColumn":24},{"ruleId":"343","severity":1,"message":"364","line":3,"column":3,"nodeType":"345","messageId":"346","endLine":3,"endColumn":19},{"ruleId":"343","severity":1,"message":"363","line":15,"column":19,"nodeType":"345","messageId":"346","endLine":15,"endColumn":24},{"ruleId":"365","severity":1,"message":"366","line":63,"column":36,"nodeType":"367","messageId":"368","endLine":63,"endColumn":37,"suggestions":"369"},{"ruleId":"365","severity":1,"message":"366","line":63,"column":45,"nodeType":"367","messageId":"368","endLine":63,"endColumn":46,"suggestions":"370"},{"ruleId":"365","severity":1,"message":"366","line":56,"column":36,"nodeType":"367","messageId":"368","endLine":56,"endColumn":37,"suggestions":"371"},{"ruleId":"365","severity":1,"message":"366","line":56,"column":45,"nodeType":"367","messageId":"368","endLine":56,"endColumn":46,"suggestions":"372"},{"ruleId":"343","severity":1,"message":"373","line":11,"column":10,"nodeType":"345","messageId":"346","endLine":11,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":51,"column":25,"nodeType":"351","endLine":54,"endColumn":27},{"ruleId":"365","severity":1,"message":"366","line":55,"column":36,"nodeType":"367","messageId":"368","endLine":55,"endColumn":37,"suggestions":"376"},{"ruleId":"365","severity":1,"message":"366","line":55,"column":45,"nodeType":"367","messageId":"368","endLine":55,"endColumn":46,"suggestions":"377"},{"ruleId":"374","severity":1,"message":"375","line":11,"column":17,"nodeType":"351","endLine":14,"endColumn":19},{"ruleId":"374","severity":1,"message":"375","line":21,"column":17,"nodeType":"351","endLine":24,"endColumn":19},{"ruleId":"343","severity":1,"message":"378","line":16,"column":3,"nodeType":"345","messageId":"346","endLine":16,"endColumn":18},{"ruleId":"343","severity":1,"message":"379","line":17,"column":3,"nodeType":"345","messageId":"346","endLine":17,"endColumn":19},{"ruleId":"352","severity":1,"message":"380","line":110,"column":6,"nodeType":"354","endLine":110,"endColumn":8,"suggestions":"381"},{"ruleId":"343","severity":1,"message":"373","line":12,"column":10,"nodeType":"345","messageId":"346","endLine":12,"endColumn":28},{"ruleId":"382","severity":1,"message":"383","line":243,"column":23,"nodeType":"351","endLine":246,"endColumn":24},{"ruleId":"349","severity":1,"message":"350","line":350,"column":21,"nodeType":"351","endLine":353,"endColumn":22},{"ruleId":"343","severity":1,"message":"384","line":39,"column":11,"nodeType":"345","messageId":"346","endLine":39,"endColumn":15},{"ruleId":"343","severity":1,"message":"385","line":5,"column":3,"nodeType":"345","messageId":"346","endLine":5,"endColumn":17},{"ruleId":"343","severity":1,"message":"386","line":23,"column":18,"nodeType":"345","messageId":"346","endLine":23,"endColumn":24},{"ruleId":"352","severity":1,"message":"380","line":105,"column":6,"nodeType":"354","endLine":105,"endColumn":8,"suggestions":"387"},{"ruleId":"343","severity":1,"message":"373","line":12,"column":10,"nodeType":"345","messageId":"346","endLine":12,"endColumn":28},{"ruleId":"382","severity":1,"message":"383","line":238,"column":23,"nodeType":"351","endLine":241,"endColumn":24},{"ruleId":"349","severity":1,"message":"350","line":345,"column":21,"nodeType":"351","endLine":348,"endColumn":22},"no-unused-vars","'Counter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'createReducer' is defined but never used.","jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentOrder.id' and 'currentOrder.totalAmount'. Either include them or remove the dependency array.","ArrayExpression",["388"],"'updateUser' is defined but never used.","'useState' is defined but never used.","'increment' is defined but never used.","'incrementAsync' is defined but never used.","'count' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Toaster' is defined but never used.","'toast' is defined but never used.","'fetchAllProducts' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["389","390"],["391","392"],["393","394"],["395","396"],"'selectLoggedInUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["397","398"],["399","400"],"'ChevronLeftIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["401"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'data' is assigned a value but never used.","'selectUserInfo' is defined but never used.","'errors' is assigned a value but never used.",["402"],{"desc":"403","fix":"404"},{"messageId":"405","fix":"406","desc":"407"},{"messageId":"408","fix":"409","desc":"410"},{"messageId":"405","fix":"411","desc":"407"},{"messageId":"408","fix":"412","desc":"410"},{"messageId":"405","fix":"413","desc":"407"},{"messageId":"408","fix":"414","desc":"410"},{"messageId":"405","fix":"415","desc":"407"},{"messageId":"408","fix":"416","desc":"410"},{"messageId":"405","fix":"417","desc":"407"},{"messageId":"408","fix":"418","desc":"410"},{"messageId":"405","fix":"419","desc":"407"},{"messageId":"408","fix":"420","desc":"410"},{"desc":"421","fix":"422"},{"desc":"421","fix":"423"},"Update the dependencies array to be: [currentOrder.id, currentOrder.totalAmount]",{"range":"424","text":"425"},"removeEscape",{"range":"426","text":"427"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"428","text":"429"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"430","text":"427"},{"range":"431","text":"429"},{"range":"432","text":"427"},{"range":"433","text":"429"},{"range":"434","text":"427"},{"range":"435","text":"429"},{"range":"436","text":"427"},{"range":"437","text":"429"},{"range":"438","text":"427"},{"range":"439","text":"429"},"Update the dependencies array to be: [dispatch]",{"range":"440","text":"441"},{"range":"442","text":"441"},[1218,1220],"[currentOrder.id, currentOrder.totalAmount]",[2003,2004],"",[2003,2003],"\\",[2012,2013],[2012,2012],[1895,1896],[1895,1895],[1904,1905],[1904,1904],[1771,1772],[1771,1771],[1780,1781],[1780,1780],[3176,3178],"[dispatch]",[3021,3023]]